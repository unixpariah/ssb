<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="502" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="485.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="485.00"> </text><svg id="frames" x="10" width="1180" total_samples="672"><g><title>date (1 samples, 0.15%)</title><rect x="0.0000%" y="437" width="0.1488%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="447.50"></text></g><g><title>_start (1 samples, 0.15%)</title><rect x="0.0000%" y="421" width="0.1488%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="431.50"></text></g><g><title>_dl_start (1 samples, 0.15%)</title><rect x="0.0000%" y="405" width="0.1488%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="415.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.15%)</title><rect x="0.0000%" y="389" width="0.1488%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="399.50"></text></g><g><title>__GI___tunables_init (1 samples, 0.15%)</title><rect x="0.0000%" y="373" width="0.1488%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="383.50"></text></g><g><title>free (1 samples, 0.15%)</title><rect x="0.1488%" y="437" width="0.1488%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="1"/><text x="0.3988%" y="447.50"></text></g><g><title>_start (1 samples, 0.15%)</title><rect x="0.1488%" y="421" width="0.1488%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="1"/><text x="0.3988%" y="431.50"></text></g><g><title>_dl_start (1 samples, 0.15%)</title><rect x="0.1488%" y="405" width="0.1488%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="1"/><text x="0.3988%" y="415.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.15%)</title><rect x="0.1488%" y="389" width="0.1488%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="1"/><text x="0.3988%" y="399.50"></text></g><g><title>dl_main (1 samples, 0.15%)</title><rect x="0.1488%" y="373" width="0.1488%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="1"/><text x="0.3988%" y="383.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.15%)</title><rect x="0.1488%" y="357" width="0.1488%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="1"/><text x="0.3988%" y="367.50"></text></g><g><title>__GI__dl_catch_exception (1 samples, 0.15%)</title><rect x="0.1488%" y="341" width="0.1488%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="1"/><text x="0.3988%" y="351.50"></text></g><g><title>openaux (1 samples, 0.15%)</title><rect x="0.1488%" y="325" width="0.1488%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="1"/><text x="0.3988%" y="335.50"></text></g><g><title>_dl_map_object (1 samples, 0.15%)</title><rect x="0.1488%" y="309" width="0.1488%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="1"/><text x="0.3988%" y="319.50"></text></g><g><title>_dl_map_object_from_fd (1 samples, 0.15%)</title><rect x="0.1488%" y="293" width="0.1488%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="1"/><text x="0.3988%" y="303.50"></text></g><g><title>iwgetid (1 samples, 0.15%)</title><rect x="0.2976%" y="437" width="0.1488%" height="15" fill="rgb(231,73,38)" fg:x="2" fg:w="1"/><text x="0.5476%" y="447.50"></text></g><g><title>_start (1 samples, 0.15%)</title><rect x="0.2976%" y="421" width="0.1488%" height="15" fill="rgb(225,20,46)" fg:x="2" fg:w="1"/><text x="0.5476%" y="431.50"></text></g><g><title>_dl_start (1 samples, 0.15%)</title><rect x="0.2976%" y="405" width="0.1488%" height="15" fill="rgb(210,31,41)" fg:x="2" fg:w="1"/><text x="0.5476%" y="415.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.15%)</title><rect x="0.2976%" y="389" width="0.1488%" height="15" fill="rgb(221,200,47)" fg:x="2" fg:w="1"/><text x="0.5476%" y="399.50"></text></g><g><title>init_cpu_features.constprop.0 (1 samples, 0.15%)</title><rect x="0.2976%" y="373" width="0.1488%" height="15" fill="rgb(226,26,5)" fg:x="2" fg:w="1"/><text x="0.5476%" y="383.50"></text></g><g><title>handle_intel.constprop.0 (1 samples, 0.15%)</title><rect x="0.2976%" y="357" width="0.1488%" height="15" fill="rgb(249,33,26)" fg:x="2" fg:w="1"/><text x="0.5476%" y="367.50"></text></g><g><title>intel_check_word.constprop.0 (1 samples, 0.15%)</title><rect x="0.2976%" y="341" width="0.1488%" height="15" fill="rgb(235,183,28)" fg:x="2" fg:w="1"/><text x="0.5476%" y="351.50"></text></g><g><title>__GI___tunables_init (1 samples, 0.15%)</title><rect x="0.4464%" y="373" width="0.1488%" height="15" fill="rgb(221,5,38)" fg:x="3" fg:w="1"/><text x="0.6964%" y="383.50"></text></g><g><title>mpstat (2 samples, 0.30%)</title><rect x="0.4464%" y="437" width="0.2976%" height="15" fill="rgb(247,18,42)" fg:x="3" fg:w="2"/><text x="0.6964%" y="447.50"></text></g><g><title>_start (2 samples, 0.30%)</title><rect x="0.4464%" y="421" width="0.2976%" height="15" fill="rgb(241,131,45)" fg:x="3" fg:w="2"/><text x="0.6964%" y="431.50"></text></g><g><title>_dl_start (2 samples, 0.30%)</title><rect x="0.4464%" y="405" width="0.2976%" height="15" fill="rgb(249,31,29)" fg:x="3" fg:w="2"/><text x="0.6964%" y="415.50"></text></g><g><title>_dl_sysdep_start (2 samples, 0.30%)</title><rect x="0.4464%" y="389" width="0.2976%" height="15" fill="rgb(225,111,53)" fg:x="3" fg:w="2"/><text x="0.6964%" y="399.50"></text></g><g><title>init_cpu_features.constprop.0 (1 samples, 0.15%)</title><rect x="0.5952%" y="373" width="0.1488%" height="15" fill="rgb(238,160,17)" fg:x="4" fg:w="1"/><text x="0.8452%" y="383.50"></text></g><g><title>handle_intel.constprop.0 (1 samples, 0.15%)</title><rect x="0.5952%" y="357" width="0.1488%" height="15" fill="rgb(214,148,48)" fg:x="4" fg:w="1"/><text x="0.8452%" y="367.50"></text></g><g><title>[unknown] (3 samples, 0.45%)</title><rect x="0.7440%" y="421" width="0.4464%" height="15" fill="rgb(232,36,49)" fg:x="5" fg:w="3"/><text x="0.9940%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(std::time::Instant,notify::event::Event)]&gt; (1 samples, 0.15%)</title><rect x="1.0417%" y="405" width="0.1488%" height="15" fill="rgb(209,103,24)" fg:x="7" fg:w="1"/><text x="1.2917%" y="415.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (3 samples, 0.45%)</title><rect x="2.8274%" y="325" width="0.4464%" height="15" fill="rgb(229,88,8)" fg:x="19" fg:w="3"/><text x="3.0774%" y="335.50"></text></g><g><title>__clock_gettime_2 (3 samples, 0.45%)</title><rect x="2.8274%" y="309" width="0.4464%" height="15" fill="rgb(213,181,19)" fg:x="19" fg:w="3"/><text x="3.0774%" y="319.50"></text></g><g><title>notify_debouncer_full::DebounceDataInner&lt;T&gt;::debounced_events (11 samples, 1.64%)</title><rect x="1.7857%" y="341" width="1.6369%" height="15" fill="rgb(254,191,54)" fg:x="12" fg:w="11"/><text x="2.0357%" y="351.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.15%)</title><rect x="3.2738%" y="325" width="0.1488%" height="15" fill="rgb(241,83,37)" fg:x="22" fg:w="1"/><text x="3.5238%" y="335.50"></text></g><g><title>__clone3 (27 samples, 4.02%)</title><rect x="1.1905%" y="421" width="4.0179%" height="15" fill="rgb(233,36,39)" fg:x="8" fg:w="27"/><text x="1.4405%" y="431.50">__cl..</text></g><g><title>start_thread (27 samples, 4.02%)</title><rect x="1.1905%" y="405" width="4.0179%" height="15" fill="rgb(226,3,54)" fg:x="8" fg:w="27"/><text x="1.4405%" y="415.50">star..</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (27 samples, 4.02%)</title><rect x="1.1905%" y="389" width="4.0179%" height="15" fill="rgb(245,192,40)" fg:x="8" fg:w="27"/><text x="1.4405%" y="399.50">std:..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (27 samples, 4.02%)</title><rect x="1.1905%" y="373" width="4.0179%" height="15" fill="rgb(238,167,29)" fg:x="8" fg:w="27"/><text x="1.4405%" y="383.50">core..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (27 samples, 4.02%)</title><rect x="1.1905%" y="357" width="4.0179%" height="15" fill="rgb(232,182,51)" fg:x="8" fg:w="27"/><text x="1.4405%" y="367.50">std:..</text></g><g><title>std::thread::sleep (12 samples, 1.79%)</title><rect x="3.4226%" y="341" width="1.7857%" height="15" fill="rgb(231,60,39)" fg:x="23" fg:w="12"/><text x="3.6726%" y="351.50">s..</text></g><g><title>__GI___nanosleep (7 samples, 1.04%)</title><rect x="4.1667%" y="325" width="1.0417%" height="15" fill="rgb(208,69,12)" fg:x="28" fg:w="7"/><text x="4.4167%" y="335.50"></text></g><g><title>__clock_nanosleep (5 samples, 0.74%)</title><rect x="4.4643%" y="309" width="0.7440%" height="15" fill="rgb(235,93,37)" fg:x="30" fg:w="5"/><text x="4.7143%" y="319.50"></text></g><g><title>__GI___pthread_disable_asynccancel (3 samples, 0.45%)</title><rect x="4.7619%" y="293" width="0.4464%" height="15" fill="rgb(213,116,39)" fg:x="32" fg:w="3"/><text x="5.0119%" y="303.50"></text></g><g><title>notify-rs_debou (32 samples, 4.76%)</title><rect x="0.7440%" y="437" width="4.7619%" height="15" fill="rgb(222,207,29)" fg:x="5" fg:w="32"/><text x="0.9940%" y="447.50">notify..</text></g><g><title>__vdso_clock_gettime (2 samples, 0.30%)</title><rect x="5.2083%" y="421" width="0.2976%" height="15" fill="rgb(206,96,30)" fg:x="35" fg:w="2"/><text x="5.4583%" y="431.50"></text></g><g><title>notify-rs_inoti (1 samples, 0.15%)</title><rect x="5.5060%" y="437" width="0.1488%" height="15" fill="rgb(218,138,4)" fg:x="37" fg:w="1"/><text x="5.7560%" y="447.50"></text></g><g><title>__clone3 (1 samples, 0.15%)</title><rect x="5.5060%" y="421" width="0.1488%" height="15" fill="rgb(250,191,14)" fg:x="37" fg:w="1"/><text x="5.7560%" y="431.50"></text></g><g><title>start_thread (1 samples, 0.15%)</title><rect x="5.5060%" y="405" width="0.1488%" height="15" fill="rgb(239,60,40)" fg:x="37" fg:w="1"/><text x="5.7560%" y="415.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (1 samples, 0.15%)</title><rect x="5.5060%" y="389" width="0.1488%" height="15" fill="rgb(206,27,48)" fg:x="37" fg:w="1"/><text x="5.7560%" y="399.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.15%)</title><rect x="5.5060%" y="373" width="0.1488%" height="15" fill="rgb(225,35,8)" fg:x="37" fg:w="1"/><text x="5.7560%" y="383.50"></text></g><g><title>std::sys::pal::unix::thread::guard::current (1 samples, 0.15%)</title><rect x="5.5060%" y="357" width="0.1488%" height="15" fill="rgb(250,213,24)" fg:x="37" fg:w="1"/><text x="5.7560%" y="367.50"></text></g><g><title>__pthread_getattr_np (1 samples, 0.15%)</title><rect x="5.5060%" y="341" width="0.1488%" height="15" fill="rgb(247,123,22)" fg:x="37" fg:w="1"/><text x="5.7560%" y="351.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.15%)</title><rect x="5.5060%" y="325" width="0.1488%" height="15" fill="rgb(231,138,38)" fg:x="37" fg:w="1"/><text x="5.7560%" y="335.50"></text></g><g><title>tcache_init.part.0 (1 samples, 0.15%)</title><rect x="5.5060%" y="309" width="0.1488%" height="15" fill="rgb(231,145,46)" fg:x="37" fg:w="1"/><text x="5.7560%" y="319.50"></text></g><g><title>arena_get2 (1 samples, 0.15%)</title><rect x="5.5060%" y="293" width="0.1488%" height="15" fill="rgb(251,118,11)" fg:x="37" fg:w="1"/><text x="5.7560%" y="303.50"></text></g><g><title>alloc_new_heap (1 samples, 0.15%)</title><rect x="5.5060%" y="277" width="0.1488%" height="15" fill="rgb(217,147,25)" fg:x="37" fg:w="1"/><text x="5.7560%" y="287.50"></text></g><g><title>__GI___mprotect (1 samples, 0.15%)</title><rect x="5.5060%" y="261" width="0.1488%" height="15" fill="rgb(247,81,37)" fg:x="37" fg:w="1"/><text x="5.7560%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="5.5060%" y="245" width="0.1488%" height="15" fill="rgb(209,12,38)" fg:x="37" fg:w="1"/><text x="5.7560%" y="255.50"></text></g><g><title>__GI___getdelim (2 samples, 0.30%)</title><rect x="5.6548%" y="405" width="0.2976%" height="15" fill="rgb(227,1,9)" fg:x="38" fg:w="2"/><text x="5.9048%" y="415.50"></text></g><g><title>__GI___tsearch (1 samples, 0.15%)</title><rect x="5.9524%" y="405" width="0.1488%" height="15" fill="rgb(248,47,43)" fg:x="40" fg:w="1"/><text x="6.2024%" y="415.50"></text></g><g><title>__strcmp_avx2 (2 samples, 0.30%)</title><rect x="6.1012%" y="405" width="0.2976%" height="15" fill="rgb(221,10,30)" fg:x="41" fg:w="2"/><text x="6.3512%" y="415.50"></text></g><g><title>cxxopts::values::abstract_value&lt;bool&gt;::get_default_value[abi:cxx11] (1 samples, 0.15%)</title><rect x="6.3988%" y="405" width="0.1488%" height="15" fill="rgb(210,229,1)" fg:x="43" fg:w="1"/><text x="6.6488%" y="415.50"></text></g><g><title>read_conf_file.isra.0 (1 samples, 0.15%)</title><rect x="6.5476%" y="405" width="0.1488%" height="15" fill="rgb(222,148,37)" fg:x="44" fg:w="1"/><text x="6.7976%" y="415.50"></text></g><g><title>[[heap]] (8 samples, 1.19%)</title><rect x="5.6548%" y="421" width="1.1905%" height="15" fill="rgb(234,67,33)" fg:x="38" fg:w="8"/><text x="5.9048%" y="431.50"></text></g><g><title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (1 samples, 0.15%)</title><rect x="6.6964%" y="405" width="0.1488%" height="15" fill="rgb(247,98,35)" fg:x="45" fg:w="1"/><text x="6.9464%" y="415.50"></text></g><g><title>__memchr_avx2 (1 samples, 0.15%)</title><rect x="6.8452%" y="405" width="0.1488%" height="15" fill="rgb(247,138,52)" fg:x="46" fg:w="1"/><text x="7.0952%" y="415.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1 samples, 0.15%)</title><rect x="6.9940%" y="405" width="0.1488%" height="15" fill="rgb(213,79,30)" fg:x="47" fg:w="1"/><text x="7.2440%" y="415.50"></text></g><g><title>[[stack]] (3 samples, 0.45%)</title><rect x="6.8452%" y="421" width="0.4464%" height="15" fill="rgb(246,177,23)" fg:x="46" fg:w="3"/><text x="7.0952%" y="431.50"></text></g><g><title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (1 samples, 0.15%)</title><rect x="7.1429%" y="405" width="0.1488%" height="15" fill="rgb(230,62,27)" fg:x="48" fg:w="1"/><text x="7.3929%" y="415.50"></text></g><g><title>__strlen_avx2 (1 samples, 0.15%)</title><rect x="7.2917%" y="405" width="0.1488%" height="15" fill="rgb(216,154,8)" fg:x="49" fg:w="1"/><text x="7.5417%" y="415.50"></text></g><g><title>find_derivation (1 samples, 0.15%)</title><rect x="7.4405%" y="405" width="0.1488%" height="15" fill="rgb(244,35,45)" fg:x="50" fg:w="1"/><text x="7.6905%" y="415.50"></text></g><g><title>__strcmp_avx2 (1 samples, 0.15%)</title><rect x="7.4405%" y="389" width="0.1488%" height="15" fill="rgb(251,115,12)" fg:x="50" fg:w="1"/><text x="7.6905%" y="399.50"></text></g><g><title>add_alias2.part.0 (2 samples, 0.30%)</title><rect x="7.5893%" y="261" width="0.2976%" height="15" fill="rgb(240,54,50)" fg:x="51" fg:w="2"/><text x="7.8393%" y="271.50"></text></g><g><title>__GI___tsearch (2 samples, 0.30%)</title><rect x="7.5893%" y="245" width="0.2976%" height="15" fill="rgb(233,84,52)" fg:x="51" fg:w="2"/><text x="7.8393%" y="255.50"></text></g><g><title>__strcmp_avx2 (2 samples, 0.30%)</title><rect x="7.5893%" y="229" width="0.2976%" height="15" fill="rgb(207,117,47)" fg:x="51" fg:w="2"/><text x="7.8393%" y="239.50"></text></g><g><title>__strcmp_avx2 (1 samples, 0.15%)</title><rect x="8.1845%" y="245" width="0.1488%" height="15" fill="rgb(249,43,39)" fg:x="55" fg:w="1"/><text x="8.4345%" y="255.50"></text></g><g><title>__GI___tsearch (3 samples, 0.45%)</title><rect x="8.3333%" y="229" width="0.4464%" height="15" fill="rgb(209,38,44)" fg:x="56" fg:w="3"/><text x="8.5833%" y="239.50"></text></g><g><title>__strcmp_avx2 (2 samples, 0.30%)</title><rect x="8.4821%" y="213" width="0.2976%" height="15" fill="rgb(236,212,23)" fg:x="57" fg:w="2"/><text x="8.7321%" y="223.50"></text></g><g><title>add_alias2.part.0 (4 samples, 0.60%)</title><rect x="8.3333%" y="245" width="0.5952%" height="15" fill="rgb(242,79,21)" fg:x="56" fg:w="4"/><text x="8.5833%" y="255.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.15%)</title><rect x="8.7798%" y="229" width="0.1488%" height="15" fill="rgb(211,96,35)" fg:x="59" fg:w="1"/><text x="9.0298%" y="239.50"></text></g><g><title>__GI___tfind (4 samples, 0.60%)</title><rect x="9.0774%" y="229" width="0.5952%" height="15" fill="rgb(253,215,40)" fg:x="61" fg:w="4"/><text x="9.3274%" y="239.50"></text></g><g><title>__strcmp_avx2 (1 samples, 0.15%)</title><rect x="9.5238%" y="213" width="0.1488%" height="15" fill="rgb(211,81,21)" fg:x="64" fg:w="1"/><text x="9.7738%" y="223.50"></text></g><g><title>__pthread_once_slow (23 samples, 3.42%)</title><rect x="7.5893%" y="293" width="3.4226%" height="15" fill="rgb(208,190,38)" fg:x="51" fg:w="23"/><text x="7.8393%" y="303.50">__p..</text></g><g><title>__gconv_read_conf (23 samples, 3.42%)</title><rect x="7.5893%" y="277" width="3.4226%" height="15" fill="rgb(235,213,38)" fg:x="51" fg:w="23"/><text x="7.8393%" y="287.50">__g..</text></g><g><title>read_conf_file.isra.0 (21 samples, 3.12%)</title><rect x="7.8869%" y="261" width="3.1250%" height="15" fill="rgb(237,122,38)" fg:x="53" fg:w="21"/><text x="8.1369%" y="271.50">rea..</text></g><g><title>add_module (14 samples, 2.08%)</title><rect x="8.9286%" y="245" width="2.0833%" height="15" fill="rgb(244,218,35)" fg:x="60" fg:w="14"/><text x="9.1786%" y="255.50">a..</text></g><g><title>insert_module (9 samples, 1.34%)</title><rect x="9.6726%" y="229" width="1.3393%" height="15" fill="rgb(240,68,47)" fg:x="65" fg:w="9"/><text x="9.9226%" y="239.50"></text></g><g><title>__strcmp_avx2 (9 samples, 1.34%)</title><rect x="9.6726%" y="213" width="1.3393%" height="15" fill="rgb(210,16,53)" fg:x="65" fg:w="9"/><text x="9.9226%" y="223.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="11.3095%" y="277" width="0.1488%" height="15" fill="rgb(235,124,12)" fg:x="76" fg:w="1"/><text x="11.5595%" y="287.50"></text></g><g><title>pa_log_levelv_meta (31 samples, 4.61%)</title><rect x="7.5893%" y="405" width="4.6131%" height="15" fill="rgb(224,169,11)" fg:x="51" fg:w="31"/><text x="7.8393%" y="415.50">pa_lo..</text></g><g><title>init_defaults.part.0 (31 samples, 4.61%)</title><rect x="7.5893%" y="389" width="4.6131%" height="15" fill="rgb(250,166,2)" fg:x="51" fg:w="31"/><text x="7.8393%" y="399.50">init_..</text></g><g><title>pa_log_set_ident (31 samples, 4.61%)</title><rect x="7.5893%" y="373" width="4.6131%" height="15" fill="rgb(242,216,29)" fg:x="51" fg:w="31"/><text x="7.8393%" y="383.50">pa_lo..</text></g><g><title>iconv_simple (31 samples, 4.61%)</title><rect x="7.5893%" y="357" width="4.6131%" height="15" fill="rgb(230,116,27)" fg:x="51" fg:w="31"/><text x="7.8393%" y="367.50">iconv..</text></g><g><title>iconv_open (31 samples, 4.61%)</title><rect x="7.5893%" y="341" width="4.6131%" height="15" fill="rgb(228,99,48)" fg:x="51" fg:w="31"/><text x="7.8393%" y="351.50">iconv..</text></g><g><title>__GI___gconv_open (31 samples, 4.61%)</title><rect x="7.5893%" y="325" width="4.6131%" height="15" fill="rgb(253,11,6)" fg:x="51" fg:w="31"/><text x="7.8393%" y="335.50">__GI_..</text></g><g><title>__gconv_find_transform (31 samples, 4.61%)</title><rect x="7.5893%" y="309" width="4.6131%" height="15" fill="rgb(247,143,39)" fg:x="51" fg:w="31"/><text x="7.8393%" y="319.50">__gco..</text></g><g><title>find_derivation (8 samples, 1.19%)</title><rect x="11.0119%" y="293" width="1.1905%" height="15" fill="rgb(236,97,10)" fg:x="74" fg:w="8"/><text x="11.2619%" y="303.50"></text></g><g><title>__strcmp_avx2 (5 samples, 0.74%)</title><rect x="11.4583%" y="277" width="0.7440%" height="15" fill="rgb(233,208,19)" fg:x="77" fg:w="5"/><text x="11.7083%" y="287.50"></text></g><g><title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (1 samples, 0.15%)</title><rect x="12.2024%" y="405" width="0.1488%" height="15" fill="rgb(216,164,2)" fg:x="82" fg:w="1"/><text x="12.4524%" y="415.50"></text></g><g><title>[unknown] (35 samples, 5.21%)</title><rect x="7.2917%" y="421" width="5.2083%" height="15" fill="rgb(220,129,5)" fg:x="49" fg:w="35"/><text x="7.5417%" y="431.50">[unkno..</text></g><g><title>std::locale::id::_M_id (1 samples, 0.15%)</title><rect x="12.3512%" y="405" width="0.1488%" height="15" fill="rgb(242,17,10)" fg:x="83" fg:w="1"/><text x="12.6012%" y="415.50"></text></g><g><title>_GLOBAL__sub_I.00090_globals_io.cc (1 samples, 0.15%)</title><rect x="12.5000%" y="373" width="0.1488%" height="15" fill="rgb(242,107,0)" fg:x="84" fg:w="1"/><text x="12.7500%" y="383.50"></text></g><g><title>std::ios_base_library_init (1 samples, 0.15%)</title><rect x="12.5000%" y="357" width="0.1488%" height="15" fill="rgb(251,28,31)" fg:x="84" fg:w="1"/><text x="12.7500%" y="367.50"></text></g><g><title>std::basic_ios&lt;wchar_t, std::char_traits&lt;wchar_t&gt; &gt;::init (1 samples, 0.15%)</title><rect x="12.5000%" y="341" width="0.1488%" height="15" fill="rgb(233,223,10)" fg:x="84" fg:w="1"/><text x="12.7500%" y="351.50"></text></g><g><title>_dl_start_user (2 samples, 0.30%)</title><rect x="12.5000%" y="421" width="0.2976%" height="15" fill="rgb(215,21,27)" fg:x="84" fg:w="2"/><text x="12.7500%" y="431.50"></text></g><g><title>_dl_init (2 samples, 0.30%)</title><rect x="12.5000%" y="405" width="0.2976%" height="15" fill="rgb(232,23,21)" fg:x="84" fg:w="2"/><text x="12.7500%" y="415.50"></text></g><g><title>call_init (2 samples, 0.30%)</title><rect x="12.5000%" y="389" width="0.2976%" height="15" fill="rgb(244,5,23)" fg:x="84" fg:w="2"/><text x="12.7500%" y="399.50"></text></g><g><title>__cpu_indicator_init@GCC_4.8.0 (1 samples, 0.15%)</title><rect x="12.6488%" y="373" width="0.1488%" height="15" fill="rgb(226,81,46)" fg:x="85" fg:w="1"/><text x="12.8988%" y="383.50"></text></g><g><title>__GI_exit (1 samples, 0.15%)</title><rect x="12.7976%" y="373" width="0.1488%" height="15" fill="rgb(247,70,30)" fg:x="86" fg:w="1"/><text x="13.0476%" y="383.50"></text></g><g><title>__run_exit_handlers (1 samples, 0.15%)</title><rect x="12.7976%" y="357" width="0.1488%" height="15" fill="rgb(212,68,19)" fg:x="86" fg:w="1"/><text x="13.0476%" y="367.50"></text></g><g><title>_dl_fini (1 samples, 0.15%)</title><rect x="12.7976%" y="341" width="0.1488%" height="15" fill="rgb(240,187,13)" fg:x="86" fg:w="1"/><text x="13.0476%" y="351.50"></text></g><g><title>cxxopts::Options::add_option (1 samples, 0.15%)</title><rect x="13.0952%" y="341" width="0.1488%" height="15" fill="rgb(223,113,26)" fg:x="88" fg:w="1"/><text x="13.3452%" y="351.50"></text></g><g><title>std::vector&lt;cxxopts::HelpOptionDetails, std::allocator&lt;cxxopts::HelpOptionDetails&gt; &gt;::_M_realloc_insert&lt;cxxopts::HelpOptionDetails&gt; (1 samples, 0.15%)</title><rect x="13.0952%" y="325" width="0.1488%" height="15" fill="rgb(206,192,2)" fg:x="88" fg:w="1"/><text x="13.3452%" y="335.50"></text></g><g><title>std::__copy_move_a2&lt;false, std::__cxx11::regex_token_iterator&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, char, std::__cxx11::regex_traits&lt;char&gt; &gt;, std::back_insert_iterator&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (1 samples, 0.15%)</title><rect x="13.2440%" y="309" width="0.1488%" height="15" fill="rgb(241,108,4)" fg:x="89" fg:w="1"/><text x="13.4940%" y="319.50"></text></g><g><title>std::__copy_move_a&lt;false, std::__cxx11::regex_token_iterator&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, char, std::__cxx11::regex_traits&lt;char&gt; &gt;, std::back_insert_iterator&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (3 samples, 0.45%)</title><rect x="13.2440%" y="325" width="0.4464%" height="15" fill="rgb(247,173,49)" fg:x="89" fg:w="3"/><text x="13.4940%" y="335.50"></text></g><g><title>std::__cxx11::regex_token_iterator&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, char, std::__cxx11::regex_traits&lt;char&gt; &gt;::regex_token_iterator (2 samples, 0.30%)</title><rect x="13.3929%" y="309" width="0.2976%" height="15" fill="rgb(224,114,35)" fg:x="90" fg:w="2"/><text x="13.6429%" y="319.50"></text></g><g><title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (1 samples, 0.15%)</title><rect x="13.6905%" y="149" width="0.1488%" height="15" fill="rgb(245,159,27)" fg:x="92" fg:w="1"/><text x="13.9405%" y="159.50"></text></g><g><title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (1 samples, 0.15%)</title><rect x="13.6905%" y="133" width="0.1488%" height="15" fill="rgb(245,172,44)" fg:x="92" fg:w="1"/><text x="13.9405%" y="143.50"></text></g><g><title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (1 samples, 0.15%)</title><rect x="13.6905%" y="117" width="0.1488%" height="15" fill="rgb(236,23,11)" fg:x="92" fg:w="1"/><text x="13.9405%" y="127.50"></text></g><g><title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (1 samples, 0.15%)</title><rect x="13.6905%" y="101" width="0.1488%" height="15" fill="rgb(205,117,38)" fg:x="92" fg:w="1"/><text x="13.9405%" y="111.50"></text></g><g><title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (1 samples, 0.15%)</title><rect x="13.6905%" y="85" width="0.1488%" height="15" fill="rgb(237,72,25)" fg:x="92" fg:w="1"/><text x="13.9405%" y="95.50"></text></g><g><title>operator delete@plt (1 samples, 0.15%)</title><rect x="13.6905%" y="69" width="0.1488%" height="15" fill="rgb(244,70,9)" fg:x="92" fg:w="1"/><text x="13.9405%" y="79.50"></text></g><g><title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (2 samples, 0.30%)</title><rect x="13.6905%" y="165" width="0.2976%" height="15" fill="rgb(217,125,39)" fg:x="92" fg:w="2"/><text x="13.9405%" y="175.50"></text></g><g><title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (1 samples, 0.15%)</title><rect x="13.8393%" y="149" width="0.1488%" height="15" fill="rgb(235,36,10)" fg:x="93" fg:w="1"/><text x="14.0893%" y="159.50"></text></g><g><title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (1 samples, 0.15%)</title><rect x="13.8393%" y="133" width="0.1488%" height="15" fill="rgb(251,123,47)" fg:x="93" fg:w="1"/><text x="14.0893%" y="143.50"></text></g><g><title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (1 samples, 0.15%)</title><rect x="13.8393%" y="117" width="0.1488%" height="15" fill="rgb(221,13,13)" fg:x="93" fg:w="1"/><text x="14.0893%" y="127.50"></text></g><g><title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (1 samples, 0.15%)</title><rect x="13.8393%" y="101" width="0.1488%" height="15" fill="rgb(238,131,9)" fg:x="93" fg:w="1"/><text x="14.0893%" y="111.50"></text></g><g><title>std::__cxx11::collate&lt;char&gt;::do_transform (1 samples, 0.15%)</title><rect x="13.8393%" y="85" width="0.1488%" height="15" fill="rgb(211,50,8)" fg:x="93" fg:w="1"/><text x="14.0893%" y="95.50"></text></g><g><title>__GI___strxfrm_l (1 samples, 0.15%)</title><rect x="13.8393%" y="69" width="0.1488%" height="15" fill="rgb(245,182,24)" fg:x="93" fg:w="1"/><text x="14.0893%" y="79.50"></text></g><g><title>__stpncpy_avx2 (1 samples, 0.15%)</title><rect x="13.8393%" y="53" width="0.1488%" height="15" fill="rgb(242,14,37)" fg:x="93" fg:w="1"/><text x="14.0893%" y="63.50"></text></g><g><title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (1 samples, 0.15%)</title><rect x="14.1369%" y="117" width="0.1488%" height="15" fill="rgb(246,228,12)" fg:x="95" fg:w="1"/><text x="14.3869%" y="127.50"></text></g><g><title>operator new (1 samples, 0.15%)</title><rect x="14.1369%" y="101" width="0.1488%" height="15" fill="rgb(213,55,15)" fg:x="95" fg:w="1"/><text x="14.3869%" y="111.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.15%)</title><rect x="14.1369%" y="85" width="0.1488%" height="15" fill="rgb(209,9,3)" fg:x="95" fg:w="1"/><text x="14.3869%" y="95.50"></text></g><g><title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (5 samples, 0.74%)</title><rect x="13.6905%" y="245" width="0.7440%" height="15" fill="rgb(230,59,30)" fg:x="92" fg:w="5"/><text x="13.9405%" y="255.50"></text></g><g><title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (5 samples, 0.74%)</title><rect x="13.6905%" y="229" width="0.7440%" height="15" fill="rgb(209,121,21)" fg:x="92" fg:w="5"/><text x="13.9405%" y="239.50"></text></g><g><title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (5 samples, 0.74%)</title><rect x="13.6905%" y="213" width="0.7440%" height="15" fill="rgb(220,109,13)" fg:x="92" fg:w="5"/><text x="13.9405%" y="223.50"></text></g><g><title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (5 samples, 0.74%)</title><rect x="13.6905%" y="197" width="0.7440%" height="15" fill="rgb(232,18,1)" fg:x="92" fg:w="5"/><text x="13.9405%" y="207.50"></text></g><g><title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (5 samples, 0.74%)</title><rect x="13.6905%" y="181" width="0.7440%" height="15" fill="rgb(215,41,42)" fg:x="92" fg:w="5"/><text x="13.9405%" y="191.50"></text></g><g><title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (3 samples, 0.45%)</title><rect x="13.9881%" y="165" width="0.4464%" height="15" fill="rgb(224,123,36)" fg:x="94" fg:w="3"/><text x="14.2381%" y="175.50"></text></g><g><title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (3 samples, 0.45%)</title><rect x="13.9881%" y="149" width="0.4464%" height="15" fill="rgb(240,125,3)" fg:x="94" fg:w="3"/><text x="14.2381%" y="159.50"></text></g><g><title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (3 samples, 0.45%)</title><rect x="13.9881%" y="133" width="0.4464%" height="15" fill="rgb(205,98,50)" fg:x="94" fg:w="3"/><text x="14.2381%" y="143.50"></text></g><g><title>std::binary_search&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::vector&lt;char, std::allocator&lt;char&gt; &gt; &gt;, char&gt; (1 samples, 0.15%)</title><rect x="14.2857%" y="117" width="0.1488%" height="15" fill="rgb(205,185,37)" fg:x="96" fg:w="1"/><text x="14.5357%" y="127.50"></text></g><g><title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (1 samples, 0.15%)</title><rect x="14.4345%" y="229" width="0.1488%" height="15" fill="rgb(238,207,15)" fg:x="97" fg:w="1"/><text x="14.6845%" y="239.50"></text></g><g><title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (1 samples, 0.15%)</title><rect x="14.4345%" y="213" width="0.1488%" height="15" fill="rgb(213,199,42)" fg:x="97" fg:w="1"/><text x="14.6845%" y="223.50"></text></g><g><title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (1 samples, 0.15%)</title><rect x="14.4345%" y="197" width="0.1488%" height="15" fill="rgb(235,201,11)" fg:x="97" fg:w="1"/><text x="14.6845%" y="207.50"></text></g><g><title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (1 samples, 0.15%)</title><rect x="14.4345%" y="181" width="0.1488%" height="15" fill="rgb(207,46,11)" fg:x="97" fg:w="1"/><text x="14.6845%" y="191.50"></text></g><g><title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (1 samples, 0.15%)</title><rect x="14.4345%" y="165" width="0.1488%" height="15" fill="rgb(241,35,35)" fg:x="97" fg:w="1"/><text x="14.6845%" y="175.50"></text></g><g><title>std::__cxx11::regex_traits&lt;char&gt;::transform_primary&lt;char const*&gt; (1 samples, 0.15%)</title><rect x="14.4345%" y="149" width="0.1488%" height="15" fill="rgb(243,32,47)" fg:x="97" fg:w="1"/><text x="14.6845%" y="159.50"></text></g><g><title>std::__cxx11::collate&lt;char&gt;::do_transform (1 samples, 0.15%)</title><rect x="14.4345%" y="133" width="0.1488%" height="15" fill="rgb(247,202,23)" fg:x="97" fg:w="1"/><text x="14.6845%" y="143.50"></text></g><g><title>__GI___strxfrm_l (1 samples, 0.15%)</title><rect x="14.4345%" y="117" width="0.1488%" height="15" fill="rgb(219,102,11)" fg:x="97" fg:w="1"/><text x="14.6845%" y="127.50"></text></g><g><title>__stpncpy_avx2 (1 samples, 0.15%)</title><rect x="14.4345%" y="101" width="0.1488%" height="15" fill="rgb(243,110,44)" fg:x="97" fg:w="1"/><text x="14.6845%" y="111.50"></text></g><g><title>std::__cxx11::basic_regex&lt;char, std::__cxx11::regex_traits&lt;char&gt; &gt;::basic_regex (7 samples, 1.04%)</title><rect x="13.6905%" y="325" width="1.0417%" height="15" fill="rgb(222,74,54)" fg:x="92" fg:w="7"/><text x="13.9405%" y="335.50"></text></g><g><title>std::__cxx11::basic_regex&lt;char, std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_compile (7 samples, 1.04%)</title><rect x="13.6905%" y="309" width="1.0417%" height="15" fill="rgb(216,99,12)" fg:x="92" fg:w="7"/><text x="13.9405%" y="319.50"></text></g><g><title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_Compiler (7 samples, 1.04%)</title><rect x="13.6905%" y="293" width="1.0417%" height="15" fill="rgb(226,22,26)" fg:x="92" fg:w="7"/><text x="13.9405%" y="303.50"></text></g><g><title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (7 samples, 1.04%)</title><rect x="13.6905%" y="277" width="1.0417%" height="15" fill="rgb(217,163,10)" fg:x="92" fg:w="7"/><text x="13.9405%" y="287.50"></text></g><g><title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (7 samples, 1.04%)</title><rect x="13.6905%" y="261" width="1.0417%" height="15" fill="rgb(213,25,53)" fg:x="92" fg:w="7"/><text x="13.9405%" y="271.50"></text></g><g><title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (2 samples, 0.30%)</title><rect x="14.4345%" y="245" width="0.2976%" height="15" fill="rgb(252,105,26)" fg:x="97" fg:w="2"/><text x="14.6845%" y="255.50"></text></g><g><title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_match_token (1 samples, 0.15%)</title><rect x="14.5833%" y="229" width="0.1488%" height="15" fill="rgb(220,39,43)" fg:x="98" fg:w="1"/><text x="14.8333%" y="239.50"></text></g><g><title>std::__detail::_Scanner&lt;char&gt;::_M_scan_normal (1 samples, 0.15%)</title><rect x="14.5833%" y="213" width="0.1488%" height="15" fill="rgb(229,68,48)" fg:x="98" fg:w="1"/><text x="14.8333%" y="223.50"></text></g><g><title>cxxopts::OptionAdder::operator (13 samples, 1.93%)</title><rect x="12.9464%" y="357" width="1.9345%" height="15" fill="rgb(252,8,32)" fg:x="87" fg:w="13"/><text x="13.1964%" y="367.50">c..</text></g><g><title>cxxopts::values::parser_tool::split_option_names (11 samples, 1.64%)</title><rect x="13.2440%" y="341" width="1.6369%" height="15" fill="rgb(223,20,43)" fg:x="89" fg:w="11"/><text x="13.4940%" y="351.50"></text></g><g><title>std::__detail::__regex_algo_impl&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, char, std::__cxx11::regex_traits&lt;char&gt; &gt; (1 samples, 0.15%)</title><rect x="14.7321%" y="325" width="0.1488%" height="15" fill="rgb(229,81,49)" fg:x="99" fg:w="1"/><text x="14.9821%" y="335.50"></text></g><g><title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1 samples, 0.15%)</title><rect x="14.7321%" y="309" width="0.1488%" height="15" fill="rgb(236,28,36)" fg:x="99" fg:w="1"/><text x="14.9821%" y="319.50"></text></g><g><title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (1 samples, 0.15%)</title><rect x="14.8810%" y="229" width="0.1488%" height="15" fill="rgb(249,185,26)" fg:x="100" fg:w="1"/><text x="15.1310%" y="239.50"></text></g><g><title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (1 samples, 0.15%)</title><rect x="14.8810%" y="213" width="0.1488%" height="15" fill="rgb(249,174,33)" fg:x="100" fg:w="1"/><text x="15.1310%" y="223.50"></text></g><g><title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (1 samples, 0.15%)</title><rect x="14.8810%" y="197" width="0.1488%" height="15" fill="rgb(233,201,37)" fg:x="100" fg:w="1"/><text x="15.1310%" y="207.50"></text></g><g><title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (1 samples, 0.15%)</title><rect x="14.8810%" y="181" width="0.1488%" height="15" fill="rgb(221,78,26)" fg:x="100" fg:w="1"/><text x="15.1310%" y="191.50"></text></g><g><title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (1 samples, 0.15%)</title><rect x="14.8810%" y="165" width="0.1488%" height="15" fill="rgb(250,127,30)" fg:x="100" fg:w="1"/><text x="15.1310%" y="175.50"></text></g><g><title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (1 samples, 0.15%)</title><rect x="14.8810%" y="149" width="0.1488%" height="15" fill="rgb(230,49,44)" fg:x="100" fg:w="1"/><text x="15.1310%" y="159.50"></text></g><g><title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_expression_term&lt;false, false&gt; (1 samples, 0.15%)</title><rect x="14.8810%" y="133" width="0.1488%" height="15" fill="rgb(229,67,23)" fg:x="100" fg:w="1"/><text x="15.1310%" y="143.50"></text></g><g><title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_match_token (1 samples, 0.15%)</title><rect x="14.8810%" y="117" width="0.1488%" height="15" fill="rgb(249,83,47)" fg:x="100" fg:w="1"/><text x="15.1310%" y="127.50"></text></g><g><title>std::__detail::_Scanner&lt;char&gt;::_M_scan_normal (1 samples, 0.15%)</title><rect x="14.8810%" y="101" width="0.1488%" height="15" fill="rgb(215,43,3)" fg:x="100" fg:w="1"/><text x="15.1310%" y="111.50"></text></g><g><title>cxxopts::OptionParser::parse (2 samples, 0.30%)</title><rect x="14.8810%" y="357" width="0.2976%" height="15" fill="rgb(238,154,13)" fg:x="100" fg:w="2"/><text x="15.1310%" y="367.50"></text></g><g><title>cxxopts::values::parser_tool::ParseArgument (2 samples, 0.30%)</title><rect x="14.8810%" y="341" width="0.2976%" height="15" fill="rgb(219,56,2)" fg:x="100" fg:w="2"/><text x="15.1310%" y="351.50"></text></g><g><title>std::__cxx11::basic_regex&lt;char, std::__cxx11::regex_traits&lt;char&gt; &gt;::basic_regex (2 samples, 0.30%)</title><rect x="14.8810%" y="325" width="0.2976%" height="15" fill="rgb(233,0,4)" fg:x="100" fg:w="2"/><text x="15.1310%" y="335.50"></text></g><g><title>std::__cxx11::basic_regex&lt;char, std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_compile (2 samples, 0.30%)</title><rect x="14.8810%" y="309" width="0.2976%" height="15" fill="rgb(235,30,7)" fg:x="100" fg:w="2"/><text x="15.1310%" y="319.50"></text></g><g><title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_Compiler (2 samples, 0.30%)</title><rect x="14.8810%" y="293" width="0.2976%" height="15" fill="rgb(250,79,13)" fg:x="100" fg:w="2"/><text x="15.1310%" y="303.50"></text></g><g><title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (2 samples, 0.30%)</title><rect x="14.8810%" y="277" width="0.2976%" height="15" fill="rgb(211,146,34)" fg:x="100" fg:w="2"/><text x="15.1310%" y="287.50"></text></g><g><title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (2 samples, 0.30%)</title><rect x="14.8810%" y="261" width="0.2976%" height="15" fill="rgb(228,22,38)" fg:x="100" fg:w="2"/><text x="15.1310%" y="271.50"></text></g><g><title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (2 samples, 0.30%)</title><rect x="14.8810%" y="245" width="0.2976%" height="15" fill="rgb(235,168,5)" fg:x="100" fg:w="2"/><text x="15.1310%" y="255.50"></text></g><g><title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_atom (1 samples, 0.15%)</title><rect x="15.0298%" y="229" width="0.1488%" height="15" fill="rgb(221,155,16)" fg:x="101" fg:w="1"/><text x="15.2798%" y="239.50"></text></g><g><title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_disjunction (1 samples, 0.15%)</title><rect x="15.0298%" y="213" width="0.1488%" height="15" fill="rgb(215,215,53)" fg:x="101" fg:w="1"/><text x="15.2798%" y="223.50"></text></g><g><title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_alternative (1 samples, 0.15%)</title><rect x="15.0298%" y="197" width="0.1488%" height="15" fill="rgb(223,4,10)" fg:x="101" fg:w="1"/><text x="15.2798%" y="207.50"></text></g><g><title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_bracket_expression (1 samples, 0.15%)</title><rect x="15.0298%" y="181" width="0.1488%" height="15" fill="rgb(234,103,6)" fg:x="101" fg:w="1"/><text x="15.2798%" y="191.50"></text></g><g><title>std::__detail::_Compiler&lt;std::__cxx11::regex_traits&lt;char&gt; &gt;::_M_insert_bracket_matcher&lt;false, false&gt; (1 samples, 0.15%)</title><rect x="15.0298%" y="165" width="0.1488%" height="15" fill="rgb(227,97,0)" fg:x="101" fg:w="1"/><text x="15.2798%" y="175.50"></text></g><g><title>std::__detail::_BracketMatcher&lt;std::__cxx11::regex_traits&lt;char&gt;, false, false&gt;::_M_ready (1 samples, 0.15%)</title><rect x="15.0298%" y="149" width="0.1488%" height="15" fill="rgb(234,150,53)" fg:x="101" fg:w="1"/><text x="15.2798%" y="159.50"></text></g><g><title>std::__cxx11::regex_traits&lt;char&gt;::isctype (1 samples, 0.15%)</title><rect x="15.0298%" y="133" width="0.1488%" height="15" fill="rgb(228,201,54)" fg:x="101" fg:w="1"/><text x="15.2798%" y="143.50"></text></g><g><title>__libc_start_main_alias_2 (17 samples, 2.53%)</title><rect x="12.7976%" y="405" width="2.5298%" height="15" fill="rgb(222,22,37)" fg:x="86" fg:w="17"/><text x="13.0476%" y="415.50">__..</text></g><g><title>__libc_start_call_main (17 samples, 2.53%)</title><rect x="12.7976%" y="389" width="2.5298%" height="15" fill="rgb(237,53,32)" fg:x="86" fg:w="17"/><text x="13.0476%" y="399.50">__..</text></g><g><title>main (16 samples, 2.38%)</title><rect x="12.9464%" y="373" width="2.3810%" height="15" fill="rgb(233,25,53)" fg:x="87" fg:w="16"/><text x="13.1964%" y="383.50">ma..</text></g><g><title>cxxopts::Options::~Options (1 samples, 0.15%)</title><rect x="15.1786%" y="357" width="0.1488%" height="15" fill="rgb(210,40,34)" fg:x="102" fg:w="1"/><text x="15.4286%" y="367.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (1 samples, 0.15%)</title><rect x="15.1786%" y="341" width="0.1488%" height="15" fill="rgb(241,220,44)" fg:x="102" fg:w="1"/><text x="15.4286%" y="351.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::shared_ptr&lt;cxxopts::OptionDetails&gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;cxxopts::OptionDetails&gt; &gt; &gt; &gt;, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose (1 samples, 0.15%)</title><rect x="15.1786%" y="325" width="0.1488%" height="15" fill="rgb(235,28,35)" fg:x="102" fg:w="1"/><text x="15.4286%" y="335.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;cxxopts::OptionDetails, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose (1 samples, 0.15%)</title><rect x="15.1786%" y="309" width="0.1488%" height="15" fill="rgb(210,56,17)" fg:x="102" fg:w="1"/><text x="15.4286%" y="319.50"></text></g><g><title>[libstdc++.so.6.0.32] (1 samples, 0.15%)</title><rect x="15.1786%" y="293" width="0.1488%" height="15" fill="rgb(224,130,29)" fg:x="102" fg:w="1"/><text x="15.4286%" y="303.50"></text></g><g><title>_dl_init_paths (1 samples, 0.15%)</title><rect x="15.4762%" y="357" width="0.1488%" height="15" fill="rgb(235,212,8)" fg:x="104" fg:w="1"/><text x="15.7262%" y="367.50"></text></g><g><title>_dl_important_hwcaps (1 samples, 0.15%)</title><rect x="15.4762%" y="341" width="0.1488%" height="15" fill="rgb(223,33,50)" fg:x="104" fg:w="1"/><text x="15.7262%" y="351.50"></text></g><g><title>_dl_hwcaps_split_masked (1 samples, 0.15%)</title><rect x="15.4762%" y="325" width="0.1488%" height="15" fill="rgb(219,149,13)" fg:x="104" fg:w="1"/><text x="15.7262%" y="335.50"></text></g><g><title>_dl_hwcaps_split (1 samples, 0.15%)</title><rect x="15.4762%" y="309" width="0.1488%" height="15" fill="rgb(250,156,29)" fg:x="104" fg:w="1"/><text x="15.7262%" y="319.50"></text></g><g><title>pamixer (78 samples, 11.61%)</title><rect x="5.6548%" y="437" width="11.6071%" height="15" fill="rgb(216,193,19)" fg:x="38" fg:w="78"/><text x="5.9048%" y="447.50">pamixer</text></g><g><title>_start (30 samples, 4.46%)</title><rect x="12.7976%" y="421" width="4.4643%" height="15" fill="rgb(216,135,14)" fg:x="86" fg:w="30"/><text x="13.0476%" y="431.50">_start</text></g><g><title>_dl_start (13 samples, 1.93%)</title><rect x="15.3274%" y="405" width="1.9345%" height="15" fill="rgb(241,47,5)" fg:x="103" fg:w="13"/><text x="15.5774%" y="415.50">_..</text></g><g><title>_dl_sysdep_start (12 samples, 1.79%)</title><rect x="15.4762%" y="389" width="1.7857%" height="15" fill="rgb(233,42,35)" fg:x="104" fg:w="12"/><text x="15.7262%" y="399.50">_..</text></g><g><title>dl_main (12 samples, 1.79%)</title><rect x="15.4762%" y="373" width="1.7857%" height="15" fill="rgb(231,13,6)" fg:x="104" fg:w="12"/><text x="15.7262%" y="383.50">d..</text></g><g><title>_dl_relocate_object (11 samples, 1.64%)</title><rect x="15.6250%" y="357" width="1.6369%" height="15" fill="rgb(207,181,40)" fg:x="105" fg:w="11"/><text x="15.8750%" y="367.50"></text></g><g><title>_dl_lookup_symbol_x (10 samples, 1.49%)</title><rect x="15.7738%" y="341" width="1.4881%" height="15" fill="rgb(254,173,49)" fg:x="106" fg:w="10"/><text x="16.0238%" y="351.50"></text></g><g><title>do_lookup_x (7 samples, 1.04%)</title><rect x="16.2202%" y="325" width="1.0417%" height="15" fill="rgb(221,1,38)" fg:x="109" fg:w="7"/><text x="16.4702%" y="335.50"></text></g><g><title>check_match (1 samples, 0.15%)</title><rect x="17.1131%" y="309" width="0.1488%" height="15" fill="rgb(206,124,46)" fg:x="115" fg:w="1"/><text x="17.3631%" y="319.50"></text></g><g><title>strcmp (1 samples, 0.15%)</title><rect x="17.1131%" y="293" width="0.1488%" height="15" fill="rgb(249,21,11)" fg:x="115" fg:w="1"/><text x="17.3631%" y="303.50"></text></g><g><title>_cairo_gstate_set_font_size (1 samples, 0.15%)</title><rect x="17.2619%" y="405" width="0.1488%" height="15" fill="rgb(222,201,40)" fg:x="116" fg:w="1"/><text x="17.5119%" y="415.50"></text></g><g><title>pixman_unorm_to_float (2 samples, 0.30%)</title><rect x="17.4107%" y="405" width="0.2976%" height="15" fill="rgb(235,61,29)" fg:x="117" fg:w="2"/><text x="17.6607%" y="415.50"></text></g><g><title>[[heap]] (13 samples, 1.93%)</title><rect x="17.2619%" y="421" width="1.9345%" height="15" fill="rgb(219,207,3)" fg:x="116" fg:w="13"/><text x="17.5119%" y="431.50">[..</text></g><g><title>store_scanline_x2r10g10b10_float (10 samples, 1.49%)</title><rect x="17.7083%" y="405" width="1.4881%" height="15" fill="rgb(222,56,46)" fg:x="119" fg:w="10"/><text x="17.9583%" y="415.50"></text></g><g><title>pixman_float_to_unorm (9 samples, 1.34%)</title><rect x="19.1964%" y="405" width="1.3393%" height="15" fill="rgb(239,76,54)" fg:x="129" fg:w="9"/><text x="19.4464%" y="415.50"></text></g><g><title>wayland_backend::rs::client_impl::ConnectionState::lock_protocol (1 samples, 0.15%)</title><rect x="20.5357%" y="405" width="0.1488%" height="15" fill="rgb(231,124,27)" fg:x="138" fg:w="1"/><text x="20.7857%" y="415.50"></text></g><g><title>wayland_backend::rs::client_impl::ConnectionState::lock_read (1 samples, 0.15%)</title><rect x="20.6845%" y="405" width="0.1488%" height="15" fill="rgb(249,195,6)" fg:x="139" fg:w="1"/><text x="20.9345%" y="415.50"></text></g><g><title>wayland_backend::rs::client_impl::InnerReadEventsGuard::read (2 samples, 0.30%)</title><rect x="20.8333%" y="405" width="0.2976%" height="15" fill="rgb(237,174,47)" fg:x="140" fg:w="2"/><text x="21.0833%" y="415.50"></text></g><g><title>[[stack]] (15 samples, 2.23%)</title><rect x="19.1964%" y="421" width="2.2321%" height="15" fill="rgb(206,201,31)" fg:x="129" fg:w="15"/><text x="19.4464%" y="431.50">[..</text></g><g><title>wayland_client::conn::blocking_read (2 samples, 0.30%)</title><rect x="21.1310%" y="405" width="0.2976%" height="15" fill="rgb(231,57,52)" fg:x="142" fg:w="2"/><text x="21.3810%" y="415.50"></text></g><g><title>&lt;smithay_client_toolkit::shm::slot::Buffer as core::ops::drop::Drop&gt;::drop (1 samples, 0.15%)</title><rect x="27.9762%" y="405" width="0.1488%" height="15" fill="rgb(248,177,22)" fg:x="188" fg:w="1"/><text x="28.2262%" y="415.50"></text></g><g><title>__GI___ctype_init (1 samples, 0.15%)</title><rect x="28.1250%" y="405" width="0.1488%" height="15" fill="rgb(215,211,37)" fg:x="189" fg:w="1"/><text x="28.3750%" y="415.50"></text></g><g><title>__GI___mmap64 (1 samples, 0.15%)</title><rect x="28.2738%" y="405" width="0.1488%" height="15" fill="rgb(241,128,51)" fg:x="190" fg:w="1"/><text x="28.5238%" y="415.50"></text></g><g><title>__GI___sigprocmask (3 samples, 0.45%)</title><rect x="31.9940%" y="389" width="0.4464%" height="15" fill="rgb(227,165,31)" fg:x="215" fg:w="3"/><text x="32.2440%" y="399.50"></text></g><g><title>__pthread_sigmask (3 samples, 0.45%)</title><rect x="31.9940%" y="373" width="0.4464%" height="15" fill="rgb(228,167,24)" fg:x="215" fg:w="3"/><text x="32.2440%" y="383.50"></text></g><g><title>__spawni_child (31 samples, 4.61%)</title><rect x="28.4226%" y="405" width="4.6131%" height="15" fill="rgb(228,143,12)" fg:x="191" fg:w="31"/><text x="28.6726%" y="415.50">__spa..</text></g><g><title>__execvpe_common (4 samples, 0.60%)</title><rect x="32.4405%" y="389" width="0.5952%" height="15" fill="rgb(249,149,8)" fg:x="218" fg:w="4"/><text x="32.6905%" y="399.50"></text></g><g><title>__GI_getenv (1 samples, 0.15%)</title><rect x="32.8869%" y="373" width="0.1488%" height="15" fill="rgb(243,35,44)" fg:x="221" fg:w="1"/><text x="33.1369%" y="383.50"></text></g><g><title>fetch_scanline_x2r10g10b10_float (8 samples, 1.19%)</title><rect x="33.0357%" y="405" width="1.1905%" height="15" fill="rgb(246,89,9)" fg:x="222" fg:w="8"/><text x="33.2857%" y="415.50"></text></g><g><title>fetch_scanline_x2r10g10b10_float (19 samples, 2.83%)</title><rect x="34.2262%" y="357" width="2.8274%" height="15" fill="rgb(233,213,13)" fg:x="230" fg:w="19"/><text x="34.4762%" y="367.50">fe..</text></g><g><title>pixman_unorm_to_float (13 samples, 1.93%)</title><rect x="35.1190%" y="341" width="1.9345%" height="15" fill="rgb(233,141,41)" fg:x="236" fg:w="13"/><text x="35.3690%" y="351.50">p..</text></g><g><title>bits_image_fetch_untransformed_float (21 samples, 3.12%)</title><rect x="34.2262%" y="389" width="3.1250%" height="15" fill="rgb(239,167,4)" fg:x="230" fg:w="21"/><text x="34.4762%" y="399.50">bit..</text></g><g><title>bits_image_fetch_untransformed_repeat_none (21 samples, 3.12%)</title><rect x="34.2262%" y="373" width="3.1250%" height="15" fill="rgb(209,217,16)" fg:x="230" fg:w="21"/><text x="34.4762%" y="383.50">bit..</text></g><g><title>pixman_expand_to_float (2 samples, 0.30%)</title><rect x="37.0536%" y="357" width="0.2976%" height="15" fill="rgb(219,88,35)" fg:x="249" fg:w="2"/><text x="37.3036%" y="367.50"></text></g><g><title>combine_src_u_float (12 samples, 1.79%)</title><rect x="37.3512%" y="389" width="1.7857%" height="15" fill="rgb(220,193,23)" fg:x="251" fg:w="12"/><text x="37.6012%" y="399.50">c..</text></g><g><title>fetch_scanline_generic_float (7 samples, 1.04%)</title><rect x="39.2857%" y="373" width="1.0417%" height="15" fill="rgb(230,90,52)" fg:x="264" fg:w="7"/><text x="39.5357%" y="383.50"></text></g><g><title>fetch_scanline_x8r8g8b8 (7 samples, 1.04%)</title><rect x="39.2857%" y="357" width="1.0417%" height="15" fill="rgb(252,106,19)" fg:x="264" fg:w="7"/><text x="39.5357%" y="367.50"></text></g><g><title>fetch_scanline_x2r10g10b10_float (31 samples, 4.61%)</title><rect x="40.3274%" y="373" width="4.6131%" height="15" fill="rgb(206,74,20)" fg:x="271" fg:w="31"/><text x="40.5774%" y="383.50">fetch..</text></g><g><title>pixman_unorm_to_float (20 samples, 2.98%)</title><rect x="41.9643%" y="357" width="2.9762%" height="15" fill="rgb(230,138,44)" fg:x="282" fg:w="20"/><text x="42.2143%" y="367.50">pix..</text></g><g><title>dest_get_scanline_wide (55 samples, 8.18%)</title><rect x="39.1369%" y="389" width="8.1845%" height="15" fill="rgb(235,182,43)" fg:x="263" fg:w="55"/><text x="39.3869%" y="399.50">dest_get_sc..</text></g><g><title>pixman_expand_to_float (16 samples, 2.38%)</title><rect x="44.9405%" y="373" width="2.3810%" height="15" fill="rgb(242,16,51)" fg:x="302" fg:w="16"/><text x="45.1905%" y="383.50">pi..</text></g><g><title>pixman_contract_from_float (37 samples, 5.51%)</title><rect x="47.3214%" y="357" width="5.5060%" height="15" fill="rgb(248,9,4)" fg:x="318" fg:w="37"/><text x="47.5714%" y="367.50">pixman_..</text></g><g><title>store_scanline_generic_float (39 samples, 5.80%)</title><rect x="47.3214%" y="373" width="5.8036%" height="15" fill="rgb(210,31,22)" fg:x="318" fg:w="39"/><text x="47.5714%" y="383.50">store_s..</text></g><g><title>store_scanline_x8r8g8b8 (2 samples, 0.30%)</title><rect x="52.8274%" y="357" width="0.2976%" height="15" fill="rgb(239,54,39)" fg:x="355" fg:w="2"/><text x="53.0774%" y="367.50"></text></g><g><title>general_composite_rect (148 samples, 22.02%)</title><rect x="34.2262%" y="405" width="22.0238%" height="15" fill="rgb(230,99,41)" fg:x="230" fg:w="148"/><text x="34.4762%" y="415.50">general_composite_rect</text></g><g><title>dest_write_back_wide (60 samples, 8.93%)</title><rect x="47.3214%" y="389" width="8.9286%" height="15" fill="rgb(253,106,12)" fg:x="318" fg:w="60"/><text x="47.5714%" y="399.50">dest_write_ba..</text></g><g><title>store_scanline_x2r10g10b10_float (21 samples, 3.12%)</title><rect x="53.1250%" y="373" width="3.1250%" height="15" fill="rgb(213,46,41)" fg:x="357" fg:w="21"/><text x="53.3750%" y="383.50">sto..</text></g><g><title>pixman_float_to_unorm (17 samples, 2.53%)</title><rect x="53.7202%" y="357" width="2.5298%" height="15" fill="rgb(215,133,35)" fg:x="361" fg:w="17"/><text x="53.9702%" y="367.50">pi..</text></g><g><title>longest_match (3 samples, 0.45%)</title><rect x="56.2500%" y="405" width="0.4464%" height="15" fill="rgb(213,28,5)" fg:x="378" fg:w="3"/><text x="56.5000%" y="415.50"></text></g><g><title>png::filter::unfilter (1 samples, 0.15%)</title><rect x="56.6964%" y="405" width="0.1488%" height="15" fill="rgb(215,77,49)" fg:x="381" fg:w="1"/><text x="56.9464%" y="415.50"></text></g><g><title>pqdownheap.constprop.0 (1 samples, 0.15%)</title><rect x="56.8452%" y="405" width="0.1488%" height="15" fill="rgb(248,100,22)" fg:x="382" fg:w="1"/><text x="57.0952%" y="415.50"></text></g><g><title>ssb::main (1 samples, 0.15%)</title><rect x="56.9940%" y="405" width="0.1488%" height="15" fill="rgb(208,67,9)" fg:x="383" fg:w="1"/><text x="57.2440%" y="415.50"></text></g><g><title>tokio::runtime::runtime::Runtime::block_on (1 samples, 0.15%)</title><rect x="56.9940%" y="389" width="0.1488%" height="15" fill="rgb(219,133,21)" fg:x="383" fg:w="1"/><text x="57.2440%" y="399.50"></text></g><g><title>tokio::runtime::context::runtime::enter_runtime (1 samples, 0.15%)</title><rect x="56.9940%" y="373" width="0.1488%" height="15" fill="rgb(246,46,29)" fg:x="383" fg:w="1"/><text x="57.2440%" y="383.50"></text></g><g><title>ssb::main::{{closure}} (1 samples, 0.15%)</title><rect x="56.9940%" y="357" width="0.1488%" height="15" fill="rgb(246,185,52)" fg:x="383" fg:w="1"/><text x="57.2440%" y="367.50"></text></g><g><title>ssb::StatusBar::draw (1 samples, 0.15%)</title><rect x="56.9940%" y="341" width="0.1488%" height="15" fill="rgb(252,136,11)" fg:x="383" fg:w="1"/><text x="57.2440%" y="351.50"></text></g><g><title>cairo::context::Context::show_text (1 samples, 0.15%)</title><rect x="56.9940%" y="325" width="0.1488%" height="15" fill="rgb(219,138,53)" fg:x="383" fg:w="1"/><text x="57.2440%" y="335.50"></text></g><g><title>cairo_show_text (1 samples, 0.15%)</title><rect x="56.9940%" y="309" width="0.1488%" height="15" fill="rgb(211,51,23)" fg:x="383" fg:w="1"/><text x="57.2440%" y="319.50"></text></g><g><title>_cairo_gstate_show_text_glyphs (1 samples, 0.15%)</title><rect x="56.9940%" y="293" width="0.1488%" height="15" fill="rgb(247,221,28)" fg:x="383" fg:w="1"/><text x="57.2440%" y="303.50"></text></g><g><title>_cairo_surface_show_text_glyphs (1 samples, 0.15%)</title><rect x="56.9940%" y="277" width="0.1488%" height="15" fill="rgb(251,222,45)" fg:x="383" fg:w="1"/><text x="57.2440%" y="287.50"></text></g><g><title>_cairo_image_surface_glyphs (1 samples, 0.15%)</title><rect x="56.9940%" y="261" width="0.1488%" height="15" fill="rgb(217,162,53)" fg:x="383" fg:w="1"/><text x="57.2440%" y="271.50"></text></g><g><title>_cairo_compositor_glyphs (1 samples, 0.15%)</title><rect x="56.9940%" y="245" width="0.1488%" height="15" fill="rgb(229,93,14)" fg:x="383" fg:w="1"/><text x="57.2440%" y="255.50"></text></g><g><title>_cairo_composite_rectangles_init_for_glyphs (1 samples, 0.15%)</title><rect x="56.9940%" y="229" width="0.1488%" height="15" fill="rgb(209,67,49)" fg:x="383" fg:w="1"/><text x="57.2440%" y="239.50"></text></g><g><title>_cairo_composite_rectangles_intersect (1 samples, 0.15%)</title><rect x="56.9940%" y="213" width="0.1488%" height="15" fill="rgb(213,87,29)" fg:x="383" fg:w="1"/><text x="57.2440%" y="223.50"></text></g><g><title>_cairo_clip_reduce_to_rectangle (1 samples, 0.15%)</title><rect x="56.9940%" y="197" width="0.1488%" height="15" fill="rgb(205,151,52)" fg:x="383" fg:w="1"/><text x="57.2440%" y="207.50"></text></g><g><title>start_thread (4 samples, 0.60%)</title><rect x="57.1429%" y="405" width="0.5952%" height="15" fill="rgb(253,215,39)" fg:x="384" fg:w="4"/><text x="57.3929%" y="415.50"></text></g><g><title>[unknown] (245 samples, 36.46%)</title><rect x="21.4286%" y="421" width="36.4583%" height="15" fill="rgb(221,220,41)" fg:x="144" fg:w="245"/><text x="21.6786%" y="431.50">[unknown]</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (1 samples, 0.15%)</title><rect x="57.7381%" y="405" width="0.1488%" height="15" fill="rgb(218,133,21)" fg:x="388" fg:w="1"/><text x="57.9881%" y="415.50"></text></g><g><title>ssb::main::{{closure}} (1 samples, 0.15%)</title><rect x="57.7381%" y="389" width="0.1488%" height="15" fill="rgb(221,193,43)" fg:x="388" fg:w="1"/><text x="57.9881%" y="399.50"></text></g><g><title>ssb::StatusBar::draw (1 samples, 0.15%)</title><rect x="57.7381%" y="373" width="0.1488%" height="15" fill="rgb(240,128,52)" fg:x="388" fg:w="1"/><text x="57.9881%" y="383.50"></text></g><g><title>cairo::context::Context::show_text (1 samples, 0.15%)</title><rect x="57.7381%" y="357" width="0.1488%" height="15" fill="rgb(253,114,12)" fg:x="388" fg:w="1"/><text x="57.9881%" y="367.50"></text></g><g><title>cairo_show_text (1 samples, 0.15%)</title><rect x="57.7381%" y="341" width="0.1488%" height="15" fill="rgb(215,223,47)" fg:x="388" fg:w="1"/><text x="57.9881%" y="351.50"></text></g><g><title>_cairo_gstate_show_text_glyphs (1 samples, 0.15%)</title><rect x="57.7381%" y="325" width="0.1488%" height="15" fill="rgb(248,225,23)" fg:x="388" fg:w="1"/><text x="57.9881%" y="335.50"></text></g><g><title>_cairo_surface_show_text_glyphs (1 samples, 0.15%)</title><rect x="57.7381%" y="309" width="0.1488%" height="15" fill="rgb(250,108,0)" fg:x="388" fg:w="1"/><text x="57.9881%" y="319.50"></text></g><g><title>_cairo_image_surface_glyphs (1 samples, 0.15%)</title><rect x="57.7381%" y="293" width="0.1488%" height="15" fill="rgb(228,208,7)" fg:x="388" fg:w="1"/><text x="57.9881%" y="303.50"></text></g><g><title>_cairo_compositor_glyphs (1 samples, 0.15%)</title><rect x="57.7381%" y="277" width="0.1488%" height="15" fill="rgb(244,45,10)" fg:x="388" fg:w="1"/><text x="57.9881%" y="287.50"></text></g><g><title>_cairo_traps_compositor_glyphs (1 samples, 0.15%)</title><rect x="57.7381%" y="261" width="0.1488%" height="15" fill="rgb(207,125,25)" fg:x="388" fg:w="1"/><text x="57.9881%" y="271.50"></text></g><g><title>clip_and_composite (1 samples, 0.15%)</title><rect x="57.7381%" y="245" width="0.1488%" height="15" fill="rgb(210,195,18)" fg:x="388" fg:w="1"/><text x="57.9881%" y="255.50"></text></g><g><title>composite_glyphs (1 samples, 0.15%)</title><rect x="57.7381%" y="229" width="0.1488%" height="15" fill="rgb(249,80,12)" fg:x="388" fg:w="1"/><text x="57.9881%" y="239.50"></text></g><g><title>pixman_composite_glyphs_no_mask (1 samples, 0.15%)</title><rect x="57.7381%" y="213" width="0.1488%" height="15" fill="rgb(221,65,9)" fg:x="388" fg:w="1"/><text x="57.9881%" y="223.50"></text></g><g><title>[unknown] (3 samples, 0.45%)</title><rect x="61.7560%" y="389" width="0.4464%" height="15" fill="rgb(235,49,36)" fg:x="415" fg:w="3"/><text x="62.0060%" y="399.50"></text></g><g><title>__GI___ctype_init (7 samples, 1.04%)</title><rect x="62.2024%" y="389" width="1.0417%" height="15" fill="rgb(225,32,20)" fg:x="418" fg:w="7"/><text x="62.4524%" y="399.50"></text></g><g><title>__GI___sigsetjmp (9 samples, 1.34%)</title><rect x="63.2440%" y="389" width="1.3393%" height="15" fill="rgb(215,141,46)" fg:x="425" fg:w="9"/><text x="63.4940%" y="399.50"></text></g><g><title>std::sys::pal::unix::thread::guard::current (1 samples, 0.15%)</title><rect x="64.5833%" y="357" width="0.1488%" height="15" fill="rgb(250,160,47)" fg:x="434" fg:w="1"/><text x="64.8333%" y="367.50"></text></g><g><title>__pthread_getattr_np (1 samples, 0.15%)</title><rect x="64.5833%" y="341" width="0.1488%" height="15" fill="rgb(216,222,40)" fg:x="434" fg:w="1"/><text x="64.8333%" y="351.50"></text></g><g><title>__realloc (1 samples, 0.15%)</title><rect x="64.5833%" y="325" width="0.1488%" height="15" fill="rgb(234,217,39)" fg:x="434" fg:w="1"/><text x="64.8333%" y="335.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (2 samples, 0.30%)</title><rect x="64.5833%" y="373" width="0.2976%" height="15" fill="rgb(207,178,40)" fg:x="434" fg:w="2"/><text x="64.8333%" y="383.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.15%)</title><rect x="64.7321%" y="357" width="0.1488%" height="15" fill="rgb(221,136,13)" fg:x="435" fg:w="1"/><text x="64.9821%" y="367.50"></text></g><g><title>std::thread::sleep (1 samples, 0.15%)</title><rect x="64.7321%" y="341" width="0.1488%" height="15" fill="rgb(249,199,10)" fg:x="435" fg:w="1"/><text x="64.9821%" y="351.50"></text></g><g><title>__GI___mprotect (1 samples, 0.15%)</title><rect x="65.0298%" y="357" width="0.1488%" height="15" fill="rgb(249,222,13)" fg:x="437" fg:w="1"/><text x="65.2798%" y="367.50"></text></g><g><title>__clone3 (50 samples, 7.44%)</title><rect x="57.8869%" y="421" width="7.4405%" height="15" fill="rgb(244,185,38)" fg:x="389" fg:w="50"/><text x="58.1369%" y="431.50">__clone3</text></g><g><title>start_thread (49 samples, 7.29%)</title><rect x="58.0357%" y="405" width="7.2917%" height="15" fill="rgb(236,202,9)" fg:x="390" fg:w="49"/><text x="58.2857%" y="415.50">start_thre..</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (5 samples, 0.74%)</title><rect x="64.5833%" y="389" width="0.7440%" height="15" fill="rgb(250,229,37)" fg:x="434" fg:w="5"/><text x="64.8333%" y="399.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (3 samples, 0.45%)</title><rect x="64.8810%" y="373" width="0.4464%" height="15" fill="rgb(206,174,23)" fg:x="436" fg:w="3"/><text x="65.1310%" y="383.50"></text></g><g><title>__GI___sysconf (1 samples, 0.15%)</title><rect x="65.1786%" y="357" width="0.1488%" height="15" fill="rgb(211,33,43)" fg:x="438" fg:w="1"/><text x="65.4286%" y="367.50"></text></g><g><title>tokio::runtime::builder::Builder::build (4 samples, 0.60%)</title><rect x="65.4762%" y="293" width="0.5952%" height="15" fill="rgb(245,58,50)" fg:x="440" fg:w="4"/><text x="65.7262%" y="303.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch (4 samples, 0.60%)</title><rect x="65.4762%" y="277" width="0.5952%" height="15" fill="rgb(244,68,36)" fg:x="440" fg:w="4"/><text x="65.7262%" y="287.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (4 samples, 0.60%)</title><rect x="65.4762%" y="261" width="0.5952%" height="15" fill="rgb(232,229,15)" fg:x="440" fg:w="4"/><text x="65.7262%" y="271.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (4 samples, 0.60%)</title><rect x="65.4762%" y="245" width="0.5952%" height="15" fill="rgb(254,30,23)" fg:x="440" fg:w="4"/><text x="65.7262%" y="255.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (3 samples, 0.45%)</title><rect x="65.6250%" y="229" width="0.4464%" height="15" fill="rgb(235,160,14)" fg:x="441" fg:w="3"/><text x="65.8750%" y="239.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::lock_slow (2 samples, 0.30%)</title><rect x="65.7738%" y="213" width="0.2976%" height="15" fill="rgb(212,155,44)" fg:x="442" fg:w="2"/><text x="66.0238%" y="223.50"></text></g><g><title>cairo::context::Context::show_text (1 samples, 0.15%)</title><rect x="66.2202%" y="229" width="0.1488%" height="15" fill="rgb(226,2,50)" fg:x="445" fg:w="1"/><text x="66.4702%" y="239.50"></text></g><g><title>cairo_show_text (1 samples, 0.15%)</title><rect x="66.2202%" y="213" width="0.1488%" height="15" fill="rgb(234,177,6)" fg:x="445" fg:w="1"/><text x="66.4702%" y="223.50"></text></g><g><title>_cairo_default_context_get_scaled_font (1 samples, 0.15%)</title><rect x="66.2202%" y="197" width="0.1488%" height="15" fill="rgb(217,24,9)" fg:x="445" fg:w="1"/><text x="66.4702%" y="207.50"></text></g><g><title>_cairo_gstate_get_scaled_font (1 samples, 0.15%)</title><rect x="66.2202%" y="181" width="0.1488%" height="15" fill="rgb(220,13,46)" fg:x="445" fg:w="1"/><text x="66.4702%" y="191.50"></text></g><g><title>_cairo_gstate_ensure_scaled_font (1 samples, 0.15%)</title><rect x="66.2202%" y="165" width="0.1488%" height="15" fill="rgb(239,221,27)" fg:x="445" fg:w="1"/><text x="66.4702%" y="175.50"></text></g><g><title>cairo_scaled_font_create (1 samples, 0.15%)</title><rect x="66.2202%" y="149" width="0.1488%" height="15" fill="rgb(222,198,25)" fg:x="445" fg:w="1"/><text x="66.4702%" y="159.50"></text></g><g><title>_cairo_scaled_font_map_lock (1 samples, 0.15%)</title><rect x="66.2202%" y="133" width="0.1488%" height="15" fill="rgb(211,99,13)" fg:x="445" fg:w="1"/><text x="66.4702%" y="143.50"></text></g><g><title>pthread_mutex_lock@plt (1 samples, 0.15%)</title><rect x="66.2202%" y="117" width="0.1488%" height="15" fill="rgb(232,111,31)" fg:x="445" fg:w="1"/><text x="66.4702%" y="127.50"></text></g><g><title>_cairo_image_surface_coerce_to_format (1 samples, 0.15%)</title><rect x="66.3690%" y="181" width="0.1488%" height="15" fill="rgb(245,82,37)" fg:x="446" fg:w="1"/><text x="66.6190%" y="191.50"></text></g><g><title>pixman_image_composite32 (1 samples, 0.15%)</title><rect x="66.3690%" y="165" width="0.1488%" height="15" fill="rgb(227,149,46)" fg:x="446" fg:w="1"/><text x="66.6190%" y="175.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.30%)</title><rect x="66.5179%" y="149" width="0.2976%" height="15" fill="rgb(218,36,50)" fg:x="447" fg:w="2"/><text x="66.7679%" y="159.50"></text></g><g><title>convert_data_to_bytes (6 samples, 0.89%)</title><rect x="66.8155%" y="133" width="0.8929%" height="15" fill="rgb(226,80,48)" fg:x="449" fg:w="6"/><text x="67.0655%" y="143.50"></text></g><g><title>png_do_write_transformations (9 samples, 1.34%)</title><rect x="66.8155%" y="149" width="1.3393%" height="15" fill="rgb(238,224,15)" fg:x="449" fg:w="9"/><text x="67.0655%" y="159.50"></text></g><g><title>png_do_strip_channel (3 samples, 0.45%)</title><rect x="67.7083%" y="133" width="0.4464%" height="15" fill="rgb(241,136,10)" fg:x="455" fg:w="3"/><text x="67.9583%" y="143.50"></text></g><g><title>_tr_flush_block (2 samples, 0.30%)</title><rect x="87.3512%" y="85" width="0.2976%" height="15" fill="rgb(208,32,45)" fg:x="587" fg:w="2"/><text x="87.6012%" y="95.50"></text></g><g><title>build_tree (2 samples, 0.30%)</title><rect x="87.3512%" y="69" width="0.2976%" height="15" fill="rgb(207,135,9)" fg:x="587" fg:w="2"/><text x="87.6012%" y="79.50"></text></g><g><title>pqdownheap.constprop.0 (2 samples, 0.30%)</title><rect x="87.3512%" y="53" width="0.2976%" height="15" fill="rgb(206,86,44)" fg:x="587" fg:w="2"/><text x="87.6012%" y="63.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.30%)</title><rect x="90.1786%" y="69" width="0.2976%" height="15" fill="rgb(245,177,15)" fg:x="606" fg:w="2"/><text x="90.4286%" y="79.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.15%)</title><rect x="90.4762%" y="53" width="0.1488%" height="15" fill="rgb(206,64,50)" fg:x="608" fg:w="1"/><text x="90.7262%" y="63.50"></text></g><g><title>fill_window (26 samples, 3.87%)</title><rect x="87.6488%" y="85" width="3.8690%" height="15" fill="rgb(234,36,40)" fg:x="589" fg:w="26"/><text x="87.8988%" y="95.50">fill..</text></g><g><title>read_buf (7 samples, 1.04%)</title><rect x="90.4762%" y="69" width="1.0417%" height="15" fill="rgb(213,64,8)" fg:x="608" fg:w="7"/><text x="90.7262%" y="79.50"></text></g><g><title>adler32_z (6 samples, 0.89%)</title><rect x="90.6250%" y="53" width="0.8929%" height="15" fill="rgb(210,75,36)" fg:x="609" fg:w="6"/><text x="90.8750%" y="63.50"></text></g><g><title>cairo::surface_png::&lt;impl cairo::surface::Surface&gt;::write_to_png (189 samples, 28.12%)</title><rect x="66.3690%" y="229" width="28.1250%" height="15" fill="rgb(229,88,21)" fg:x="446" fg:w="189"/><text x="66.6190%" y="239.50">cairo::surface_png::&lt;impl cairo::surface::Sur..</text></g><g><title>cairo_surface_write_to_png_stream (189 samples, 28.12%)</title><rect x="66.3690%" y="213" width="28.1250%" height="15" fill="rgb(252,204,47)" fg:x="446" fg:w="189"/><text x="66.6190%" y="223.50">cairo_surface_write_to_png_stream</text></g><g><title>write_png (189 samples, 28.12%)</title><rect x="66.3690%" y="197" width="28.1250%" height="15" fill="rgb(208,77,27)" fg:x="446" fg:w="189"/><text x="66.6190%" y="207.50">write_png</text></g><g><title>png_write_image (188 samples, 27.98%)</title><rect x="66.5179%" y="181" width="27.9762%" height="15" fill="rgb(221,76,26)" fg:x="447" fg:w="188"/><text x="66.7679%" y="191.50">png_write_image</text></g><g><title>png_write_row (188 samples, 27.98%)</title><rect x="66.5179%" y="165" width="27.9762%" height="15" fill="rgb(225,139,18)" fg:x="447" fg:w="188"/><text x="66.7679%" y="175.50">png_write_row</text></g><g><title>png_write_find_filter (177 samples, 26.34%)</title><rect x="68.1548%" y="149" width="26.3393%" height="15" fill="rgb(230,137,11)" fg:x="458" fg:w="177"/><text x="68.4048%" y="159.50">png_write_find_filter</text></g><g><title>png_compress_IDAT (78 samples, 11.61%)</title><rect x="82.8869%" y="133" width="11.6071%" height="15" fill="rgb(212,28,1)" fg:x="557" fg:w="78"/><text x="83.1369%" y="143.50">png_compress_IDAT</text></g><g><title>deflate (78 samples, 11.61%)</title><rect x="82.8869%" y="117" width="11.6071%" height="15" fill="rgb(248,164,17)" fg:x="557" fg:w="78"/><text x="83.1369%" y="127.50">deflate</text></g><g><title>deflate_slow (78 samples, 11.61%)</title><rect x="82.8869%" y="101" width="11.6071%" height="15" fill="rgb(222,171,42)" fg:x="557" fg:w="78"/><text x="83.1369%" y="111.50">deflate_slow</text></g><g><title>longest_match (20 samples, 2.98%)</title><rect x="91.5179%" y="85" width="2.9762%" height="15" fill="rgb(243,84,45)" fg:x="615" fg:w="20"/><text x="91.7679%" y="95.50">lon..</text></g><g><title>cairo_set_font_size (3 samples, 0.45%)</title><rect x="94.4940%" y="229" width="0.4464%" height="15" fill="rgb(252,49,23)" fg:x="635" fg:w="3"/><text x="94.7440%" y="239.50"></text></g><g><title>_cairo_gstate_set_font_size (2 samples, 0.30%)</title><rect x="94.6429%" y="213" width="0.2976%" height="15" fill="rgb(215,19,7)" fg:x="636" fg:w="2"/><text x="94.8929%" y="223.50"></text></g><g><title>cairo_matrix_init_scale (1 samples, 0.15%)</title><rect x="94.7917%" y="197" width="0.1488%" height="15" fill="rgb(238,81,41)" fg:x="637" fg:w="1"/><text x="95.0417%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;image::dynimage::DynamicImage&gt; (1 samples, 0.15%)</title><rect x="94.9405%" y="229" width="0.1488%" height="15" fill="rgb(210,199,37)" fg:x="638" fg:w="1"/><text x="95.1905%" y="239.50"></text></g><g><title>image::dynimage::DynamicImage::to_rgb8 (2 samples, 0.30%)</title><rect x="95.0893%" y="229" width="0.2976%" height="15" fill="rgb(244,192,49)" fg:x="639" fg:w="2"/><text x="95.3393%" y="239.50"></text></g><g><title>&lt;image::buffer_::ImageBuffer&lt;FromType,Container&gt; as image::buffer_::ConvertBuffer&lt;image::buffer_::ImageBuffer&lt;ToType,alloc::vec::Vec&lt;&lt;ToType as image::traits::Pixel&gt;::Subpixel&gt;&gt;&gt;&gt;::convert (2 samples, 0.30%)</title><rect x="95.0893%" y="213" width="0.2976%" height="15" fill="rgb(226,211,11)" fg:x="639" fg:w="2"/><text x="95.3393%" y="223.50"></text></g><g><title>image::codecs::png::PngDecoder&lt;R&gt;::with_limits (1 samples, 0.15%)</title><rect x="95.3869%" y="197" width="0.1488%" height="15" fill="rgb(236,162,54)" fg:x="641" fg:w="1"/><text x="95.6369%" y="207.50"></text></g><g><title>png::decoder::Decoder&lt;R&gt;::read_header_info (1 samples, 0.15%)</title><rect x="95.3869%" y="181" width="0.1488%" height="15" fill="rgb(220,229,9)" fg:x="641" fg:w="1"/><text x="95.6369%" y="191.50"></text></g><g><title>png::decoder::ReadDecoder&lt;R&gt;::decode_next (1 samples, 0.15%)</title><rect x="95.3869%" y="165" width="0.1488%" height="15" fill="rgb(250,87,22)" fg:x="641" fg:w="1"/><text x="95.6369%" y="175.50"></text></g><g><title>png::decoder::stream::StreamingDecoder::update (1 samples, 0.15%)</title><rect x="95.3869%" y="149" width="0.1488%" height="15" fill="rgb(239,43,17)" fg:x="641" fg:w="1"/><text x="95.6369%" y="159.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.15%)</title><rect x="95.5357%" y="117" width="0.1488%" height="15" fill="rgb(231,177,25)" fg:x="642" fg:w="1"/><text x="95.7857%" y="127.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.15%)</title><rect x="95.6845%" y="69" width="0.1488%" height="15" fill="rgb(219,179,1)" fg:x="643" fg:w="1"/><text x="95.9345%" y="79.50"></text></g><g><title>png::decoder::ReadDecoder&lt;R&gt;::decode_next (7 samples, 1.04%)</title><rect x="95.6845%" y="117" width="1.0417%" height="15" fill="rgb(238,219,53)" fg:x="643" fg:w="7"/><text x="95.9345%" y="127.50"></text></g><g><title>png::decoder::stream::StreamingDecoder::update (7 samples, 1.04%)</title><rect x="95.6845%" y="101" width="1.0417%" height="15" fill="rgb(232,167,36)" fg:x="643" fg:w="7"/><text x="95.9345%" y="111.50"></text></g><g><title>png::decoder::zlib::ZlibStream::decompress (7 samples, 1.04%)</title><rect x="95.6845%" y="85" width="1.0417%" height="15" fill="rgb(244,19,51)" fg:x="643" fg:w="7"/><text x="95.9345%" y="95.50"></text></g><g><title>fdeflate::decompress::Decompressor::read (6 samples, 0.89%)</title><rect x="95.8333%" y="69" width="0.8929%" height="15" fill="rgb(224,6,22)" fg:x="644" fg:w="6"/><text x="96.0833%" y="79.50"></text></g><g><title>simd_adler32::Adler32::write (1 samples, 0.15%)</title><rect x="96.5774%" y="53" width="0.1488%" height="15" fill="rgb(224,145,5)" fg:x="649" fg:w="1"/><text x="96.8274%" y="63.50"></text></g><g><title>simd_adler32::imp::avx2::imp::update_imp (1 samples, 0.15%)</title><rect x="96.5774%" y="37" width="0.1488%" height="15" fill="rgb(234,130,49)" fg:x="649" fg:w="1"/><text x="96.8274%" y="47.50"></text></g><g><title>image::dynimage::load_from_memory (13 samples, 1.93%)</title><rect x="95.3869%" y="229" width="1.9345%" height="15" fill="rgb(254,6,2)" fg:x="641" fg:w="13"/><text x="95.6369%" y="239.50">i..</text></g><g><title>image::io::reader::Reader&lt;R&gt;::decode (13 samples, 1.93%)</title><rect x="95.3869%" y="213" width="1.9345%" height="15" fill="rgb(208,96,46)" fg:x="641" fg:w="13"/><text x="95.6369%" y="223.50">i..</text></g><g><title>image::dynimage::decoder_to_image (12 samples, 1.79%)</title><rect x="95.5357%" y="197" width="1.7857%" height="15" fill="rgb(239,3,39)" fg:x="642" fg:w="12"/><text x="95.7857%" y="207.50">i..</text></g><g><title>image::image::decoder_to_vec (12 samples, 1.79%)</title><rect x="95.5357%" y="181" width="1.7857%" height="15" fill="rgb(233,210,1)" fg:x="642" fg:w="12"/><text x="95.7857%" y="191.50">i..</text></g><g><title>&lt;image::codecs::png::PngDecoder&lt;R&gt; as image::image::ImageDecoder&gt;::read_image_boxed (12 samples, 1.79%)</title><rect x="95.5357%" y="165" width="1.7857%" height="15" fill="rgb(244,137,37)" fg:x="642" fg:w="12"/><text x="95.7857%" y="175.50">&lt;..</text></g><g><title>png::decoder::Reader&lt;R&gt;::next_frame (12 samples, 1.79%)</title><rect x="95.5357%" y="149" width="1.7857%" height="15" fill="rgb(240,136,2)" fg:x="642" fg:w="12"/><text x="95.7857%" y="159.50">p..</text></g><g><title>png::decoder::Reader&lt;R&gt;::next_interlaced_row_impl (12 samples, 1.79%)</title><rect x="95.5357%" y="133" width="1.7857%" height="15" fill="rgb(239,18,37)" fg:x="642" fg:w="12"/><text x="95.7857%" y="143.50">p..</text></g><g><title>png::filter::unfilter (4 samples, 0.60%)</title><rect x="96.7262%" y="117" width="0.5952%" height="15" fill="rgb(218,185,22)" fg:x="650" fg:w="4"/><text x="96.9762%" y="127.50"></text></g><g><title>ssb::StatusBar::draw (211 samples, 31.40%)</title><rect x="66.0714%" y="245" width="31.3988%" height="15" fill="rgb(225,218,4)" fg:x="444" fg:w="211"/><text x="66.3214%" y="255.50">ssb::StatusBar::draw</text></g><g><title>smithay_client_toolkit::shm::slot::SlotPool::new (1 samples, 0.15%)</title><rect x="97.3214%" y="229" width="0.1488%" height="15" fill="rgb(230,182,32)" fg:x="654" fg:w="1"/><text x="97.5714%" y="239.50"></text></g><g><title>smithay_client_toolkit::shm::raw::RawPool::new (1 samples, 0.15%)</title><rect x="97.3214%" y="213" width="0.1488%" height="15" fill="rgb(242,56,43)" fg:x="654" fg:w="1"/><text x="97.5714%" y="223.50"></text></g><g><title>memmap2::os::file_len (1 samples, 0.15%)</title><rect x="97.3214%" y="197" width="0.1488%" height="15" fill="rgb(233,99,24)" fg:x="654" fg:w="1"/><text x="97.5714%" y="207.50"></text></g><g><title>std::fs::File::metadata (1 samples, 0.15%)</title><rect x="97.3214%" y="181" width="0.1488%" height="15" fill="rgb(234,209,42)" fg:x="654" fg:w="1"/><text x="97.5714%" y="191.50"></text></g><g><title>std::sys::pal::unix::fs::try_statx (1 samples, 0.15%)</title><rect x="97.3214%" y="165" width="0.1488%" height="15" fill="rgb(227,7,12)" fg:x="654" fg:w="1"/><text x="97.5714%" y="175.50"></text></g><g><title>statx (1 samples, 0.15%)</title><rect x="97.3214%" y="149" width="0.1488%" height="15" fill="rgb(245,203,43)" fg:x="654" fg:w="1"/><text x="97.5714%" y="159.50"></text></g><g><title>ssb::StatusBar::new (1 samples, 0.15%)</title><rect x="97.4702%" y="245" width="0.1488%" height="15" fill="rgb(238,205,33)" fg:x="655" fg:w="1"/><text x="97.7202%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.15%)</title><rect x="97.4702%" y="229" width="0.1488%" height="15" fill="rgb(231,56,7)" fg:x="655" fg:w="1"/><text x="97.7202%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.15%)</title><rect x="97.4702%" y="213" width="0.1488%" height="15" fill="rgb(244,186,29)" fg:x="655" fg:w="1"/><text x="97.7202%" y="223.50"></text></g><g><title>ssb::modules::custom::get_command_output (1 samples, 0.15%)</title><rect x="97.4702%" y="197" width="0.1488%" height="15" fill="rgb(234,111,31)" fg:x="655" fg:w="1"/><text x="97.7202%" y="207.50"></text></g><g><title>ssb::modules::custom::new_command (1 samples, 0.15%)</title><rect x="97.4702%" y="181" width="0.1488%" height="15" fill="rgb(241,149,10)" fg:x="655" fg:w="1"/><text x="97.7202%" y="191.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (1 samples, 0.15%)</title><rect x="97.4702%" y="165" width="0.1488%" height="15" fill="rgb(249,206,44)" fg:x="655" fg:w="1"/><text x="97.7202%" y="175.50"></text></g><g><title>wayland_backend::rs::client_impl::ConnectionState::lock_read (2 samples, 0.30%)</title><rect x="97.9167%" y="213" width="0.2976%" height="15" fill="rgb(251,153,30)" fg:x="658" fg:w="2"/><text x="98.1667%" y="223.50"></text></g><g><title>__libc_start_main_alias_2 (221 samples, 32.89%)</title><rect x="65.4762%" y="405" width="32.8869%" height="15" fill="rgb(239,152,38)" fg:x="440" fg:w="221"/><text x="65.7262%" y="415.50">__libc_start_main_alias_2</text></g><g><title>__libc_start_call_main (221 samples, 32.89%)</title><rect x="65.4762%" y="389" width="32.8869%" height="15" fill="rgb(249,139,47)" fg:x="440" fg:w="221"/><text x="65.7262%" y="399.50">__libc_start_call_main</text></g><g><title>main (221 samples, 32.89%)</title><rect x="65.4762%" y="373" width="32.8869%" height="15" fill="rgb(244,64,35)" fg:x="440" fg:w="221"/><text x="65.7262%" y="383.50">main</text></g><g><title>std::rt::lang_start_internal (221 samples, 32.89%)</title><rect x="65.4762%" y="357" width="32.8869%" height="15" fill="rgb(216,46,15)" fg:x="440" fg:w="221"/><text x="65.7262%" y="367.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (221 samples, 32.89%)</title><rect x="65.4762%" y="341" width="32.8869%" height="15" fill="rgb(250,74,19)" fg:x="440" fg:w="221"/><text x="65.7262%" y="351.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (221 samples, 32.89%)</title><rect x="65.4762%" y="325" width="32.8869%" height="15" fill="rgb(249,42,33)" fg:x="440" fg:w="221"/><text x="65.7262%" y="335.50">std::sys_common::backtrace::__rust_begin_short_backtr..</text></g><g><title>ssb::main (221 samples, 32.89%)</title><rect x="65.4762%" y="309" width="32.8869%" height="15" fill="rgb(242,149,17)" fg:x="440" fg:w="221"/><text x="65.7262%" y="319.50">ssb::main</text></g><g><title>tokio::runtime::runtime::Runtime::block_on (217 samples, 32.29%)</title><rect x="66.0714%" y="293" width="32.2917%" height="15" fill="rgb(244,29,21)" fg:x="444" fg:w="217"/><text x="66.3214%" y="303.50">tokio::runtime::runtime::Runtime::block_on</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (217 samples, 32.29%)</title><rect x="66.0714%" y="277" width="32.2917%" height="15" fill="rgb(220,130,37)" fg:x="444" fg:w="217"/><text x="66.3214%" y="287.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>ssb::main::{{closure}} (217 samples, 32.29%)</title><rect x="66.0714%" y="261" width="32.2917%" height="15" fill="rgb(211,67,2)" fg:x="444" fg:w="217"/><text x="66.3214%" y="271.50">ssb::main::{{closure}}</text></g><g><title>wayland_client::conn::blocking_read (5 samples, 0.74%)</title><rect x="97.6190%" y="245" width="0.7440%" height="15" fill="rgb(235,68,52)" fg:x="656" fg:w="5"/><text x="97.8690%" y="255.50"></text></g><g><title>wayland_backend::rs::client_impl::InnerReadEventsGuard::read (3 samples, 0.45%)</title><rect x="97.9167%" y="229" width="0.4464%" height="15" fill="rgb(246,142,3)" fg:x="658" fg:w="3"/><text x="98.1667%" y="239.50"></text></g><g><title>wayland_backend::rs::map::ObjectMap&lt;Data&gt;::find (1 samples, 0.15%)</title><rect x="98.2143%" y="213" width="0.1488%" height="15" fill="rgb(241,25,7)" fg:x="660" fg:w="1"/><text x="98.4643%" y="223.50"></text></g><g><title>_start (224 samples, 33.33%)</title><rect x="65.3274%" y="421" width="33.3333%" height="15" fill="rgb(242,119,39)" fg:x="439" fg:w="224"/><text x="65.5774%" y="431.50">_start</text></g><g><title>_dl_start (2 samples, 0.30%)</title><rect x="98.3631%" y="405" width="0.2976%" height="15" fill="rgb(241,98,45)" fg:x="661" fg:w="2"/><text x="98.6131%" y="415.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.15%)</title><rect x="98.5119%" y="389" width="0.1488%" height="15" fill="rgb(254,28,30)" fg:x="662" fg:w="1"/><text x="98.7619%" y="399.50"></text></g><g><title>init_cpu_features.constprop.0 (1 samples, 0.15%)</title><rect x="98.5119%" y="373" width="0.1488%" height="15" fill="rgb(241,142,54)" fg:x="662" fg:w="1"/><text x="98.7619%" y="383.50"></text></g><g><title>get_common_indices.constprop.0 (1 samples, 0.15%)</title><rect x="98.5119%" y="357" width="0.1488%" height="15" fill="rgb(222,85,15)" fg:x="662" fg:w="1"/><text x="98.7619%" y="367.50"></text></g><g><title>ssb (548 samples, 81.55%)</title><rect x="17.2619%" y="437" width="81.5476%" height="15" fill="rgb(210,85,47)" fg:x="116" fg:w="548"/><text x="17.5119%" y="447.50">ssb</text></g><g><title>syscall (1 samples, 0.15%)</title><rect x="98.6607%" y="421" width="0.1488%" height="15" fill="rgb(224,206,25)" fg:x="663" fg:w="1"/><text x="98.9107%" y="431.50"></text></g><g><title>[unknown] (4 samples, 0.60%)</title><rect x="98.8095%" y="421" width="0.5952%" height="15" fill="rgb(243,201,19)" fg:x="664" fg:w="4"/><text x="99.0595%" y="431.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.15%)</title><rect x="99.2560%" y="405" width="0.1488%" height="15" fill="rgb(236,59,4)" fg:x="667" fg:w="1"/><text x="99.5060%" y="415.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.15%)</title><rect x="99.4048%" y="325" width="0.1488%" height="15" fill="rgb(254,179,45)" fg:x="668" fg:w="1"/><text x="99.6548%" y="335.50"></text></g><g><title>tcache_init.part.0 (1 samples, 0.15%)</title><rect x="99.4048%" y="309" width="0.1488%" height="15" fill="rgb(226,14,10)" fg:x="668" fg:w="1"/><text x="99.6548%" y="319.50"></text></g><g><title>arena_get2 (1 samples, 0.15%)</title><rect x="99.4048%" y="293" width="0.1488%" height="15" fill="rgb(244,27,41)" fg:x="668" fg:w="1"/><text x="99.6548%" y="303.50"></text></g><g><title>std::sys::pal::unix::thread::guard::current (2 samples, 0.30%)</title><rect x="99.4048%" y="357" width="0.2976%" height="15" fill="rgb(235,35,32)" fg:x="668" fg:w="2"/><text x="99.6548%" y="367.50"></text></g><g><title>__pthread_getattr_np (2 samples, 0.30%)</title><rect x="99.4048%" y="341" width="0.2976%" height="15" fill="rgb(218,68,31)" fg:x="668" fg:w="2"/><text x="99.6548%" y="351.50"></text></g><g><title>__free (1 samples, 0.15%)</title><rect x="99.5536%" y="325" width="0.1488%" height="15" fill="rgb(207,120,37)" fg:x="669" fg:w="1"/><text x="99.8036%" y="335.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.15%)</title><rect x="99.7024%" y="357" width="0.1488%" height="15" fill="rgb(227,98,0)" fg:x="670" fg:w="1"/><text x="99.9524%" y="367.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (1 samples, 0.15%)</title><rect x="99.7024%" y="341" width="0.1488%" height="15" fill="rgb(207,7,3)" fg:x="670" fg:w="1"/><text x="99.9524%" y="351.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (1 samples, 0.15%)</title><rect x="99.7024%" y="325" width="0.1488%" height="15" fill="rgb(206,98,19)" fg:x="670" fg:w="1"/><text x="99.9524%" y="335.50"></text></g><g><title>all (672 samples, 100%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(217,5,26)" fg:x="0" fg:w="672"/><text x="0.2500%" y="463.50"></text></g><g><title>tokio-runtime-w (8 samples, 1.19%)</title><rect x="98.8095%" y="437" width="1.1905%" height="15" fill="rgb(235,190,38)" fg:x="664" fg:w="8"/><text x="99.0595%" y="447.50"></text></g><g><title>__clone3 (4 samples, 0.60%)</title><rect x="99.4048%" y="421" width="0.5952%" height="15" fill="rgb(247,86,24)" fg:x="668" fg:w="4"/><text x="99.6548%" y="431.50"></text></g><g><title>start_thread (4 samples, 0.60%)</title><rect x="99.4048%" y="405" width="0.5952%" height="15" fill="rgb(205,101,16)" fg:x="668" fg:w="4"/><text x="99.6548%" y="415.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (4 samples, 0.60%)</title><rect x="99.4048%" y="389" width="0.5952%" height="15" fill="rgb(246,168,33)" fg:x="668" fg:w="4"/><text x="99.6548%" y="399.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (4 samples, 0.60%)</title><rect x="99.4048%" y="373" width="0.5952%" height="15" fill="rgb(231,114,1)" fg:x="668" fg:w="4"/><text x="99.6548%" y="383.50"></text></g><g><title>std::sys_common::thread_info::set (1 samples, 0.15%)</title><rect x="99.8512%" y="357" width="0.1488%" height="15" fill="rgb(207,184,53)" fg:x="671" fg:w="1"/><text x="100.1012%" y="367.50"></text></g><g><title>__cxa_thread_atexit_impl (1 samples, 0.15%)</title><rect x="99.8512%" y="341" width="0.1488%" height="15" fill="rgb(224,95,51)" fg:x="671" fg:w="1"/><text x="100.1012%" y="351.50"></text></g><g><title>__GI___pthread_mutex_unlock_usercnt (1 samples, 0.15%)</title><rect x="99.8512%" y="325" width="0.1488%" height="15" fill="rgb(212,188,45)" fg:x="671" fg:w="1"/><text x="100.1012%" y="335.50"></text></g></svg></svg>